// Generated by CoffeeScript 1.12.2
(function() {
  var Model, Null, Struct, Varying, from, match, otherwise, ref, ref1, terminate, types, util,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  from = require('../core/from');

  ref = require('../core/case'), match = ref.match, otherwise = ref.otherwise;

  types = require('../util/types');

  ref1 = require('../collection/struct'), Null = ref1.Null, Struct = ref1.Struct;

  Varying = require('../core/varying').Varying;

  util = require('../util/util');

  terminate = function(x) {
    if (x.all != null) {
      return x.all;
    } else {
      return x;
    }
  };

  Model = (function(superClass1) {
    extend(Model, superClass1);

    Model.prototype.isModel = true;

    function Model(attributes, options) {
      if (attributes == null) {
        attributes = {};
      }
      this._resolves = {};
      this._attributes = {};
      Model.__super__.constructor.call(this, attributes, options);
      this._bind();
    }

    Model.prototype.get = function(key) {
      var attribute, value;
      value = Model.__super__.get.call(this, key);
      if (value == null) {
        attribute = this.attribute(key);
        value = attribute != null ? attribute.writeDefault === true ? this.set(key, attribute["default"]()) : attribute["default"]() : void 0;
      }
      return value != null ? value : value = null;
    };

    Model.prototype.resolve = function(key, app) {
      var base;
      return (base = this._resolves)[key] != null ? base[key] : base[key] = (function(_this) {
        return function() {
          return _this.watch(key).flatMap(function(value) {
            var attribute, result;
            if ((value == null) && (attribute = _this.attribute(key)).isReference === true) {
              result = terminate(attribute.resolver()).point(function(x) {
                return _this.constructor._point(x, _this, app);
              }).map(function(x) {
                var ref2;
                return (ref2 = x != null ? x.mapSuccess(function(y) {
                  return attribute.constructor.deserialize(y);
                }) : void 0) != null ? ref2 : x;
              });
              result.reactNow(function(x) {
                return types.result.success.match(x, function(y) {
                  return _this.set(key, y);
                });
              });
              return result;
            } else {
              return new Varying(value);
            }
          });
        };
      })(this)();
    };

    Model.prototype.resolveNow = function(key, app) {
      return this.resolve(key, app).reactNow(function() {});
    };

    Model.attributes = function() {
      var superClass;
      if (this._attributesAgainst !== this) {
        this._attributesAgainst = this;
        superClass = util.superClass(this);
        return this._attributes = superClass.attributes != null ? superClass.attributes().shadow() : new Struct();
      } else {
        return this._attributes;
      }
    };

    Model.allAttributes = function() {
      var attr, attrs, i, len, ref2, result;
      attrs = this.attributes();
      result = {};
      ref2 = attrs.enumerate();
      for (i = 0, len = ref2.length; i < len; i++) {
        attr = ref2[i];
        result[attr] = attrs.get(attr);
      }
      return result;
    };

    Model.attribute = function(key, attribute) {
      return this.attributes().set(key, attribute);
    };

    Model.prototype.attribute = function(key) {
      var base, base1;
      return (base = this._attributes)[key] != null ? base[key] : base[key] = typeof (base1 = this.constructor.attributes().get(key)) === "function" ? new base1(this, key) : void 0;
    };

    Model.prototype.allAttributes = function() {
      var key, results;
      results = [];
      for (key in this.constructor.allAttributes()) {
        results.push(this.attribute(key));
      }
      return results;
    };

    Model.binders = function() {
      if (this._bindersAgainst !== this) {
        this._bindersAgainst = this;
        this._binders = [];
      }
      return this._binders;
    };

    Model.bind = function(key, binding) {
      binding._key = key;
      return this.binders().push(binding);
    };

    Model.prototype._bind = function() {
      var recurse;
      this._binders = {};
      recurse = (function(_this) {
        return function(obj) {
          var binder, i, len, ref2, superClass;
          ref2 = obj.binders();
          for (i = 0, len = ref2.length; i < len; i++) {
            binder = ref2[i];
            if (_this._binders[binder._key] == null) {
              (function(binder) {
                var key;
                key = binder._key;
                return _this._binders[key] = terminate(binder).point(function(x) {
                  return _this.constructor._point(x, _this);
                }).reactNow(function(value) {
                  return _this.set(key, value);
                });
              })(binder);
            }
          }
          superClass = util.superClass(obj);
          if (superClass && (superClass.binders != null)) {
            recurse(superClass);
          }
          return null;
        };
      })(this);
      recurse(this.constructor);
      return null;
    };

    Model._point = match(from["default"].dynamic(function(x, self) {
      if (util.isFunction(x)) {
        return Varying.ly(x(self));
      } else if (util.isString(x)) {
        return self.watch(x);
      } else {
        return Varying.ly(x);
      }
    }), from["default"].watch(function(x, self) {
      return self.watch(x);
    }), from["default"].resolve(function(x, self, app) {
      if (app != null) {
        return self.resolve(x, app);
      } else {
        return from["default"].resolve(x);
      }
    }), from["default"].attribute(function(x, self) {
      return new Varying(self.attribute(x));
    }), from["default"].varying(function(x, self) {
      if (util.isFunction(x)) {
        return Varying.ly(x(self));
      } else {
        return Varying.ly(x);
      }
    }), from["default"].app(function(_, self, app) {
      if (app != null) {
        return new Varying(app);
      } else {
        return from["default"].app();
      }
    }), from["default"].self(function(x, self) {
      if (util.isFunction(x)) {
        return Varying.ly(x(self));
      } else {
        return Varying.ly(self);
      }
    }));

    Model.prototype.issues = function() {
      return this.issues$ != null ? this.issues$ : this.issues$ = (function(_this) {
        return function() {
          var attr, issueList;
          issueList = (function() {
            var i, len, ref2, results;
            ref2 = this.allAttributes();
            results = [];
            for (i = 0, len = ref2.length; i < len; i++) {
              attr = ref2[i];
              if (attr.issues != null) {
                results.push(attr.issues());
              }
            }
            return results;
          }).call(_this);
          if (_this._issues != null) {
            issueList.unshift(_this._issues());
          }
          return (new (require('../collection/derived/catted-list').CattedList)(issueList)).filter(function(issue) {
            return issue.active;
          });
        };
      })(this)();
    };

    Model.prototype.valid = function(severity) {
      if (severity == null) {
        severity = 0;
      }
      return this.issues().filter(function(issue) {
        return issue.severity.map(function(issueSev) {
          return issueSev <= severity;
        });
      }).watchLength().map(function(length) {
        return length === 0;
      });
    };

    Model.deserialize = function(data) {
      var attribute, key, prop, ref2;
      ref2 = this.allAttributes();
      for (key in ref2) {
        attribute = ref2[key];
        prop = util.deepGet(data, key);
        if (prop != null) {
          util.deepSet(data, key)(attribute.deserialize(prop));
        }
      }
      return new this(data);
    };

    return Model;

  })(Struct);

  module.exports = {
    Model: Model
  };

}).call(this);
