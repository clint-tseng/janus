// Generated by CoffeeScript 1.12.2
(function() {
  var Map, Model, Null, Varying, from, match, otherwise, ref, ref1, types, util,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  from = require('../core/from');

  ref = require('../core/case'), match = ref.match, otherwise = ref.otherwise;

  types = require('../util/types');

  ref1 = require('../collection/map'), Null = ref1.Null, Map = ref1.Map;

  Varying = require('../core/varying').Varying;

  util = require('../util/util');

  Model = (function(superClass) {
    extend(Model, superClass);

    Model.prototype.isModel = true;

    function Model(data, options) {
      if (data == null) {
        data = {};
      }
      this._attributes = {};
      Model.__super__.constructor.call(this, data, options);
      this._bind();
    }

    Model.prototype.get = function(key) {
      var attribute, value;
      value = Model.__super__.get.call(this, key);
      if ((value == null) && ((attribute = this.attribute(key)) != null)) {
        value = attribute.writeDefault === true ? this.set(key, attribute["default"]()) : attribute["default"]();
      }
      return value != null ? value : value = null;
    };

    Model.prototype.attribute = function(key) {
      var base, base1;
      return (base = this._attributes)[key] != null ? base[key] : base[key] = typeof (base1 = this.constructor.schema.attributes[key]) === "function" ? new base1(this, key) : void 0;
    };

    Model.prototype.autoResolveWith = function(app) {
      var attribute, key, ref2;
      for (key in this.constructor.schema.attributes) {
        attribute = this.attribute(key);
        if ((attribute.isReference === (ref2 = attribute.autoResolve) && ref2 === true)) {
          attribute.resolveWith(app);
        }
      }
      return null;
    };

    Model.prototype._bind = function() {
      var binding, key, ref2;
      this._bindings = {};
      ref2 = this.constructor.schema.bindings;
      for (key in ref2) {
        binding = ref2[key];
        this._bindings[key] = binding.all.point(this.pointer()).react(this.set(key));
      }
      return null;
    };

    Model.point = match(from["default"].dynamic(function(x, self) {
      if (util.isFunction(x)) {
        return Varying.of(x(self));
      } else if (util.isString(x)) {
        return self.watch(x);
      } else {
        return Varying.of(x);
      }
    }), from["default"].watch(function(x, self) {
      return self.watch(x);
    }), from["default"].attribute(function(x, self) {
      return new Varying(self.attribute(x));
    }), from["default"].varying(function(x, self) {
      if (util.isFunction(x)) {
        return Varying.of(x(self));
      } else {
        return Varying.of(x);
      }
    }), from["default"].app(function(x, self, app) {
      if (app == null) {
        app = self.options.app;
      }
      if (app != null) {
        if (x != null) {
          return app.watch(x);
        } else {
          return new Varying(app);
        }
      } else {
        return from["default"].app();
      }
    }), from["default"].self(function(x, self) {
      if (util.isFunction(x)) {
        return Varying.of(x(self));
      } else {
        return Varying.of(self);
      }
    }));

    Model.prototype.pointer = function() {
      return (function(_this) {
        return function(x) {
          return _this.constructor.point(x, _this);
        };
      })(this);
    };

    Model.prototype.issues = function() {
      return this._issues$ != null ? this._issues$ : this._issues$ = (function(_this) {
        return function() {
          var List;
          List = require('../collection/list').List;
          return new List(_this.constructor.schema.issues).flatMap(function(binding) {
            return binding.all.point(_this.pointer());
          });
        };
      })(this)();
    };

    Model.prototype.valid = function() {
      return this._valid$ != null ? this._valid$ : this._valid$ = this.issues().filter(types.validity.invalid.match).watchLength().map(function(length) {
        return length === 0;
      });
    };

    Model.prototype._parentChanged = function(key, newValue, oldValue) {
      if (this._bindings[key] == null) {
        return Model.__super__._parentChanged.call(this, key, newValue, oldValue);
      }
    };

    Model.prototype.destroy = function() {
      var _, attribute, ref2;
      ref2 = this._attributes;
      for (_ in ref2) {
        attribute = ref2[_];
        attribute.destroy();
      }
      return Model.__super__.destroy.call(this);
    };

    Model.schema = {
      attributes: {},
      bindings: {},
      issues: []
    };

    Model.deserialize = function(data) {
      var attribute, key, prop, ref2;
      ref2 = this.schema.attributes;
      for (key in ref2) {
        attribute = ref2[key];
        prop = util.deepGet(data, key);
        if (prop != null) {
          util.deepSet(data, key)(attribute.deserialize(prop));
        }
      }
      return new this(data);
    };

    Model.build = function() {
      var i, len, part, parts, schema;
      parts = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      schema = {
        attributes: util.extendNew({}, this.schema.attributes),
        bindings: util.extendNew({}, this.schema.bindings),
        issues: this.schema.issues.slice()
      };
      for (i = 0, len = parts.length; i < len; i++) {
        part = parts[i];
        part(schema);
      }
      return (function(superClass1) {
        extend(_Class, superClass1);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.schema = schema;

        return _Class;

      })(this);
    };

    return Model;

  })(Map);

  module.exports = {
    Model: Model
  };

}).call(this);
