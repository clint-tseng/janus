// Generated by CoffeeScript 1.6.2
(function() {
  var Model, Null, Struct, Varying, from, match, otherwise, terminate, types, util, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  from = require('../core/from');

  _ref = require('../core/case'), match = _ref.match, otherwise = _ref.otherwise;

  types = require('../util/types');

  _ref1 = require('./struct'), Null = _ref1.Null, Struct = _ref1.Struct;

  Varying = require('../core/varying').Varying;

  util = require('../util/util');

  terminate = function(x) {
    if (x.all != null) {
      return x.all;
    } else {
      return x;
    }
  };

  Model = (function(_super) {
    __extends(Model, _super);

    Model.prototype.isModel = true;

    function Model(attributes, options) {
      if (attributes == null) {
        attributes = {};
      }
      this._resolves = {};
      this._attributes = {};
      Model.__super__.constructor.call(this, attributes, options);
      this._bind();
    }

    Model.prototype.get = function(key) {
      var attribute, value;

      value = Model.__super__.get.call(this, key);
      if (value == null) {
        attribute = this.attribute(key);
        value = attribute != null ? attribute.writeDefault === true ? this.set(key, attribute["default"]()) : attribute["default"]() : void 0;
      }
      return value != null ? value : value = null;
    };

    Model.prototype.resolve = function(key, app) {
      var _base, _ref2,
        _this = this;

      return (_ref2 = (_base = this._resolves)[key]) != null ? _ref2 : _base[key] = (function() {
        return _this.watch(key).flatMap(function(value) {
          var attribute, result;

          if ((value == null) && (attribute = _this.attribute(key)).isReference === true) {
            result = terminate(attribute.resolver()).point(function(x) {
              return _this.constructor._point(x, _this, app);
            }).map(function(x) {
              var _ref3;

              return (_ref3 = x != null ? x.mapSuccess(function(y) {
                return attribute.constructor.deserialize(y);
              }) : void 0) != null ? _ref3 : x;
            });
            result.reactNow(function(x) {
              return types.result.success.match(x, function(y) {
                return _this.set(key, y);
              });
            });
            return result;
          } else {
            return new Varying(value);
          }
        });
      })();
    };

    Model.prototype.resolveNow = function(key, app) {
      return this.resolve(key, app).reactNow(function() {});
    };

    Model.attributes = function() {
      var superClass;

      if (this._attributesAgainst !== this) {
        this._attributesAgainst = this;
        superClass = util.superClass(this);
        return this._attributes = superClass.attributes != null ? superClass.attributes().shadow() : new Struct();
      } else {
        return this._attributes;
      }
    };

    Model.allAttributes = function() {
      var attr, attrs, result, _i, _len, _ref2;

      attrs = this.attributes();
      result = {};
      _ref2 = attrs.enumerate();
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        attr = _ref2[_i];
        result[attr] = attrs.get(attr);
      }
      return result;
    };

    Model.attribute = function(key, attribute) {
      return this.attributes().set(key, attribute);
    };

    Model.prototype.attribute = function(key) {
      var _base, _base1, _ref2;

      return (_ref2 = (_base = this._attributes)[key]) != null ? _ref2 : _base[key] = typeof (_base1 = this.constructor.attributes().get(key)) === "function" ? new _base1(this, key) : void 0;
    };

    Model.prototype.allAttributes = function() {
      var key, _results;

      _results = [];
      for (key in this.constructor.allAttributes()) {
        _results.push(this.attribute(key));
      }
      return _results;
    };

    Model.binders = function() {
      if (this._bindersAgainst !== this) {
        this._bindersAgainst = this;
        this._binders = [];
      }
      return this._binders;
    };

    Model.bind = function(key, binding) {
      binding._key = key;
      return this.binders().push(binding);
    };

    Model.prototype._bind = function() {
      var recurse,
        _this = this;

      this._binders = {};
      recurse = function(obj) {
        var binder, superClass, _i, _len, _ref2;

        _ref2 = obj.binders();
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          binder = _ref2[_i];
          if (_this._binders[binder._key] == null) {
            (function(binder) {
              var key;

              key = binder._key;
              return _this._binders[key] = terminate(binder).point(function(x) {
                return _this.constructor._point(x, _this);
              }).reactNow(function(value) {
                return _this.set(key, value);
              });
            })(binder);
          }
        }
        superClass = util.superClass(obj);
        if (superClass && (superClass.binders != null)) {
          recurse(superClass);
        }
        return null;
      };
      recurse(this.constructor);
      return null;
    };

    Model._point = match(from["default"].dynamic(function(x, self) {
      if (util.isFunction(x)) {
        return Varying.ly(x(self));
      } else if (util.isString(x)) {
        return self.watch(x);
      } else {
        return Varying.ly(x);
      }
    }), from["default"].watch(function(x, self) {
      return self.watch(x);
    }), from["default"].resolve(function(x, self, app) {
      if (app != null) {
        return self.resolve(x, app);
      } else {
        return from["default"].resolve(x);
      }
    }), from["default"].attribute(function(x, self) {
      return new Varying(self.attribute(x));
    }), from["default"].varying(function(x, self) {
      if (util.isFunction(x)) {
        return Varying.ly(x(self));
      } else {
        return Varying.ly(x);
      }
    }), from["default"].app(function(_, self, app) {
      if (app != null) {
        return new Varying(app);
      } else {
        return from["default"].app();
      }
    }), from["default"].self(function(x, self) {
      if (util.isFunction(x)) {
        return Varying.ly(x(self));
      } else {
        return Varying.ly(self);
      }
    }));

    Model.prototype.issues = function() {
      var _ref2,
        _this = this;

      return (_ref2 = this.issues$) != null ? _ref2 : this.issues$ = (function() {
        var attr, issueList;

        issueList = (function() {
          var _i, _len, _ref3, _results;

          _ref3 = this.allAttributes();
          _results = [];
          for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
            attr = _ref3[_i];
            if (attr.issues != null) {
              _results.push(attr.issues());
            }
          }
          return _results;
        }).call(_this);
        if (_this._issues != null) {
          issueList.unshift(_this._issues());
        }
        return (new (require('../collection/catted-list').CattedList)(issueList)).filter(function(issue) {
          return issue.active;
        });
      })();
    };

    Model.prototype.valid = function(severity) {
      if (severity == null) {
        severity = 0;
      }
      return this.issues().filter(function(issue) {
        return issue.severity.map(function(issueSev) {
          return issueSev <= severity;
        });
      }).watchLength().map(function(length) {
        return length === 0;
      });
    };

    Model.deserialize = function(data) {
      var attribute, key, prop, _ref2;

      _ref2 = this.allAttributes();
      for (key in _ref2) {
        attribute = _ref2[key];
        prop = util.deepGet(data, key);
        if (prop != null) {
          util.deepSet(data, key)(attribute.deserialize(prop));
        }
      }
      return new this(data);
    };

    Model.serialize = function(model, opts) {
      var result, walkAttrs,
        _this = this;

      if (opts == null) {
        opts = {};
      }
      walkAttrs = function(keys, src, target) {
        var attribute, innerResult, result, strKey, subKey, thisKey, value, _ref2;

        for (subKey in src) {
          value = src[subKey];
          thisKey = keys.concat([subKey]);
          strKey = thisKey.join('.');
          attribute = model.attribute(strKey);
          result = value === Null ? void 0 : (attribute != null) && (attribute.serialize != null) ? attribute.serialize(opts) : util.isPlainObject(value) ? (innerResult = (_ref2 = target[subKey]) != null ? _ref2 : {}, walkAttrs(thisKey, value, innerResult), innerResult) : value;
          target[subKey] = result;
        }
        return target;
      };
      result = model._parent != null ? Model.serialize(model._parent, opts) : {};
      walkAttrs([], model.attributes, result);
      return result;
    };

    Model.prototype.serialize = function() {
      return this.constructor.serialize(this);
    };

    return Model;

  })(Struct);

  module.exports = {
    Model: Model
  };

}).call(this);
