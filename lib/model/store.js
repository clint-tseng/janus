// Generated by CoffeeScript 1.6.2
(function() {
  var Base, CreateRequest, DeleteRequest, FetchRequest, List, MemoryCacheStore, Model, OnPageCacheStore, OneOfStore, Request, Store, UpdateRequest, Varying, types, util, _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  util = require('../util/util');

  types = require('../util/types');

  Base = require('../core/base').Base;

  Model = require('../model/model').Model;

  List = require('../collection/list').List;

  Varying = require('../core/varying').Varying;

  Request = (function(_super) {
    __extends(Request, _super);

    function Request(options) {
      this.options = options != null ? options : {};
      Request.__super__.constructor.call(this);
      this.value = types.result.init();
    }

    Request.prototype.signature = function() {};

    return Request;

  })(Varying);

  Store = (function(_super) {
    __extends(Store, _super);

    function Store(request, options) {
      this.request = request;
      this.options = options != null ? options : {};
      Store.__super__.constructor.call(this);
    }

    Store.prototype.handle = function() {
      var handled;

      handled = this._handle();
      if (handled === Store.Handled) {
        this.emit('requesting', this.request);
        this.request.emit('requesting', this);
      }
      return handled;
    };

    Store.Handled = {};

    Store.Unhandled = {};

    return Store;

  })(Base);

  FetchRequest = (function(_super) {
    __extends(FetchRequest, _super);

    function FetchRequest() {
      _ref = FetchRequest.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return FetchRequest;

  })(Request);

  CreateRequest = (function(_super) {
    __extends(CreateRequest, _super);

    function CreateRequest() {
      _ref1 = CreateRequest.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    return CreateRequest;

  })(Request);

  UpdateRequest = (function(_super) {
    __extends(UpdateRequest, _super);

    function UpdateRequest() {
      _ref2 = UpdateRequest.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    return UpdateRequest;

  })(Request);

  DeleteRequest = (function(_super) {
    __extends(DeleteRequest, _super);

    function DeleteRequest() {
      _ref3 = DeleteRequest.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    return DeleteRequest;

  })(Request);

  OneOfStore = (function(_super) {
    __extends(OneOfStore, _super);

    function OneOfStore(request, maybeStores, options) {
      this.request = request;
      this.maybeStores = maybeStores != null ? maybeStores : [];
      this.options = options != null ? options : {};
      OneOfStore.__super__.constructor.call(this, this.request, this.options);
    }

    OneOfStore.prototype._handle = function() {
      var handled, maybeStore, _i, _len, _ref4;

      handled = Store.Unhandled;
      _ref4 = this.maybeStores;
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        maybeStore = _ref4[_i];
        if (handled !== Store.Handled) {
          handled = maybeStore.handle(this.request);
        }
      }
      if (handled === Store.Unhandled) {
        request.set(types.result.error("No handler was available!"));
      }
      return handled;
    };

    return OneOfStore;

  })(Store);

  MemoryCacheStore = (function(_super) {
    __extends(MemoryCacheStore, _super);

    function MemoryCacheStore() {
      MemoryCacheStore.__super__.constructor.call(this);
    }

    MemoryCacheStore.prototype._cache = function() {
      var _ref4;

      return (_ref4 = this._cache$) != null ? _ref4 : this._cache$ = {};
    };

    MemoryCacheStore.prototype._invalidates = function() {
      var _ref4;

      return (_ref4 = this._invalidates$) != null ? _ref4 : this._invalidates$ = new List();
    };

    MemoryCacheStore.prototype.handle = function(request) {
      var after, cached, hit, signature, _i, _len, _ref4,
        _this = this;

      signature = request.signature();
      if ((request instanceof CreateRequest) || (request instanceof UpdateRequest) || (request instanceof DeleteRequest)) {
        _ref4 = this._invalidates().list.slice();
        for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
          cached = _ref4[_i];
          if (!(cached.invalidate(request))) {
            continue;
          }
          delete this._cache()[cached.signature()];
          this._invalidates().remove(cached);
        }
      }
      if (signature != null) {
        if (request instanceof FetchRequest) {
          hit = this._cache()[signature];
          if (hit != null) {
            if (hit !== request) {
              setTimeout((function() {
                return request.set(hit);
              }), 0);
            }
            return Store.Handled;
          } else {
            this._cache()[signature] = request;
            if (request.expires != null) {
              after = util.isFunction(request.expires) ? request.expires() : request.expires;
              if (util.isNumber(after)) {
                setTimeout((function() {
                  return delete _this._cache()[signature];
                }), after * 1000);
              }
            }
            if (request.invalidate != null) {
              this._invalidates().add(request);
            }
            return Store.Unhandled;
          }
        } else if ((request instanceof CreateRequest) || (request instanceof UpdateRequest) || (request instanceof DeleteRequest)) {
          delete this._cache()[signature];
          if (request.cacheResult !== false && !(request instanceof DeleteRequest)) {
            request.react(function(state) {
              if (state === 'success') {
                return _this._cache()[signature] = state;
              }
            });
          }
          return Store.Unhandled;
        } else {
          delete this._cache()[signature];
          return Store.Unhandled;
        }
      } else {
        return Store.Unhandled;
      }
    };

    return MemoryCacheStore;

  })(Store);

  OnPageCacheStore = (function(_super) {
    __extends(OnPageCacheStore, _super);

    function OnPageCacheStore() {
      OnPageCacheStore.__super__.constructor.call(this);
    }

    OnPageCacheStore.prototype._dom = function() {};

    OnPageCacheStore.prototype.handle = function(request) {
      var cacheDom, signature;

      signature = request.signature();
      if (signature != null) {
        cacheDom = this._dom().find("> #" + signature);
        if (cacheDom.length > 0) {
          if (request instanceof FetchRequest) {
            request.set(types.result.success(cacheDom.text()));
            return Store.Handled;
          } else {
            cacheDom.remove();
            return Store.Unhandled;
          }
        } else {
          return Store.Unhandled;
        }
      } else {
        return Store.Unhandled;
      }
    };

    return OnPageCacheStore;

  })(Store);

  util.extend(module.exports, {
    Request: Request,
    Store: Store,
    OneOfStore: OneOfStore,
    MemoryCacheStore: MemoryCacheStore,
    OnPageCacheStore: OnPageCacheStore,
    request: {
      FetchRequest: FetchRequest,
      CreateRequest: CreateRequest,
      UpdateRequest: UpdateRequest,
      DeleteRequest: DeleteRequest
    }
  });

}).call(this);
