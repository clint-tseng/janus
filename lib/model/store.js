// Generated by CoffeeScript 1.12.2
(function() {
  var Base, CreateRequest, DeleteRequest, FetchRequest, List, MemoryCacheStore, Model, OnPageCacheStore, OneOfStore, Request, Store, UpdateRequest, Varying, types, util,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  util = require('../util/util');

  types = require('../util/types');

  Base = require('../core/base').Base;

  Model = require('../model/model').Model;

  List = require('../collection/list').List;

  Varying = require('../core/varying').Varying;

  Request = (function(superClass) {
    extend(Request, superClass);

    function Request(options) {
      this.options = options != null ? options : {};
      Request.__super__.constructor.call(this);
      this.value = types.result.init();
    }

    Request.prototype.signature = function() {};

    return Request;

  })(Varying);

  Store = (function(superClass) {
    extend(Store, superClass);

    function Store(request1, options) {
      this.request = request1;
      this.options = options != null ? options : {};
      Store.__super__.constructor.call(this);
    }

    Store.prototype.handle = function() {
      var handled;
      handled = this._handle();
      if (handled === Store.Handled) {
        this.emit('requesting', this.request);
      }
      return handled;
    };

    Store.Handled = {};

    Store.Unhandled = {};

    return Store;

  })(Base);

  FetchRequest = (function(superClass) {
    extend(FetchRequest, superClass);

    function FetchRequest() {
      return FetchRequest.__super__.constructor.apply(this, arguments);
    }

    return FetchRequest;

  })(Request);

  CreateRequest = (function(superClass) {
    extend(CreateRequest, superClass);

    function CreateRequest() {
      return CreateRequest.__super__.constructor.apply(this, arguments);
    }

    return CreateRequest;

  })(Request);

  UpdateRequest = (function(superClass) {
    extend(UpdateRequest, superClass);

    function UpdateRequest() {
      return UpdateRequest.__super__.constructor.apply(this, arguments);
    }

    return UpdateRequest;

  })(Request);

  DeleteRequest = (function(superClass) {
    extend(DeleteRequest, superClass);

    function DeleteRequest() {
      return DeleteRequest.__super__.constructor.apply(this, arguments);
    }

    return DeleteRequest;

  })(Request);

  OneOfStore = (function(superClass) {
    extend(OneOfStore, superClass);

    function OneOfStore(request1, maybeStores, options) {
      this.request = request1;
      this.maybeStores = maybeStores != null ? maybeStores : [];
      this.options = options != null ? options : {};
      OneOfStore.__super__.constructor.call(this, this.request, this.options);
    }

    OneOfStore.prototype._handle = function() {
      var handled, i, len, maybeStore, ref;
      handled = Store.Unhandled;
      ref = this.maybeStores;
      for (i = 0, len = ref.length; i < len; i++) {
        maybeStore = ref[i];
        if (handled !== Store.Handled) {
          handled = maybeStore.handle(this.request);
        }
      }
      if (handled === Store.Unhandled) {
        request.set(types.result.error("No handler was available!"));
      }
      return handled;
    };

    return OneOfStore;

  })(Store);

  MemoryCacheStore = (function(superClass) {
    extend(MemoryCacheStore, superClass);

    function MemoryCacheStore() {
      MemoryCacheStore.__super__.constructor.call(this);
    }

    MemoryCacheStore.prototype._cache = function() {
      return this._cache$ != null ? this._cache$ : this._cache$ = {};
    };

    MemoryCacheStore.prototype._invalidates = function() {
      return this._invalidates$ != null ? this._invalidates$ : this._invalidates$ = new List();
    };

    MemoryCacheStore.prototype.handle = function(request) {
      var after, cached, hit, i, len, ref, signature;
      signature = request.signature();
      if ((request instanceof CreateRequest) || (request instanceof UpdateRequest) || (request instanceof DeleteRequest)) {
        ref = this._invalidates().list.slice();
        for (i = 0, len = ref.length; i < len; i++) {
          cached = ref[i];
          if (!(cached.invalidate(request))) {
            continue;
          }
          delete this._cache()[cached.signature()];
          this._invalidates().remove(cached);
        }
      }
      if (signature != null) {
        if (request instanceof FetchRequest) {
          hit = this._cache()[signature];
          if (hit != null) {
            if (hit !== request) {
              setTimeout((function() {
                return request.set(hit);
              }), 0);
            }
            return Store.Handled;
          } else {
            this._cache()[signature] = request;
            if (request.expires != null) {
              after = util.isFunction(request.expires) ? request.expires() : request.expires;
              if (util.isNumber(after)) {
                setTimeout(((function(_this) {
                  return function() {
                    return delete _this._cache()[signature];
                  };
                })(this)), after * 1000);
              }
            }
            if (request.invalidate != null) {
              this._invalidates().add(request);
            }
            return Store.Unhandled;
          }
        } else if ((request instanceof CreateRequest) || (request instanceof UpdateRequest) || (request instanceof DeleteRequest)) {
          delete this._cache()[signature];
          if (request.cacheResult !== false && !(request instanceof DeleteRequest)) {
            request.react((function(_this) {
              return function(state) {
                if (state === 'success') {
                  return _this._cache()[signature] = state;
                }
              };
            })(this));
          }
          return Store.Unhandled;
        } else {
          delete this._cache()[signature];
          return Store.Unhandled;
        }
      } else {
        return Store.Unhandled;
      }
    };

    return MemoryCacheStore;

  })(Store);

  OnPageCacheStore = (function(superClass) {
    extend(OnPageCacheStore, superClass);

    function OnPageCacheStore() {
      OnPageCacheStore.__super__.constructor.call(this);
    }

    OnPageCacheStore.prototype._dom = function() {};

    OnPageCacheStore.prototype.handle = function(request) {
      var cacheDom, signature;
      signature = request.signature();
      if (signature != null) {
        cacheDom = this._dom().find("> #" + signature);
        if (cacheDom.length > 0) {
          if (request instanceof FetchRequest) {
            request.set(types.result.success(cacheDom.text()));
            return Store.Handled;
          } else {
            cacheDom.remove();
            return Store.Unhandled;
          }
        } else {
          return Store.Unhandled;
        }
      } else {
        return Store.Unhandled;
      }
    };

    return OnPageCacheStore;

  })(Store);

  module.exports = {
    Request: Request,
    Store: Store,
    OneOfStore: OneOfStore,
    MemoryCacheStore: MemoryCacheStore,
    OnPageCacheStore: OnPageCacheStore,
    request: {
      FetchRequest: FetchRequest,
      CreateRequest: CreateRequest,
      UpdateRequest: UpdateRequest,
      DeleteRequest: DeleteRequest
    }
  };

}).call(this);
