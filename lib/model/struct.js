// Generated by CoffeeScript 1.6.2
(function() {
  var Base, Null, NullClass, Struct, Varying, deepDelete, deepGet, deepSet, extendNew, isArray, isEmptyObject, isPlainObject, traverse, traverseAll, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Base = require('../core/base').Base;

  Varying = require('../core/varying').Varying;

  _ref = require('../util/util'), deepGet = _ref.deepGet, deepSet = _ref.deepSet, deepDelete = _ref.deepDelete, extendNew = _ref.extendNew, isArray = _ref.isArray, isPlainObject = _ref.isPlainObject, isEmptyObject = _ref.isEmptyObject, traverse = _ref.traverse, traverseAll = _ref.traverseAll;

  NullClass = (function() {
    function NullClass() {}

    return NullClass;

  })();

  Null = new NullClass();

  Struct = (function(_super) {
    __extends(Struct, _super);

    Struct.prototype.isStruct = true;

    function Struct(attributes, options) {
      if (attributes == null) {
        attributes = {};
      }
      this.options = options != null ? options : {};
      Struct.__super__.constructor.call(this);
      this.attributes = {};
      this._attributes = {};
      this._watches = {};
      this._parent = this.options.parent;
      if (typeof this._preinitialize === "function") {
        this._preinitialize();
      }
      this.set(attributes);
      if (typeof this._initialize === "function") {
        this._initialize();
      }
    }

    Struct.prototype.get = function(key) {
      var value;

      value = deepGet(this.attributes, key);
      if ((value == null) && (this._parent != null)) {
        value = this._parent.get(key);
        if ((value != null ? value.isStruct : void 0) === true) {
          value = this.set(key, value.shadow());
        }
      }
      if (value === Null) {
        return null;
      } else {
        return value;
      }
    };

    Struct.prototype.set = function(x, y) {
      var obj,
        _this = this;

      if ((y != null) && (!isPlainObject(y) || isEmptyObject(y))) {
        return this._set(x, y);
      } else if (isPlainObject(y)) {
        obj = {};
        deepSet(obj, x)(y);
        return traverse(obj, function(path, value) {
          return _this._set(path, value);
        });
      } else if (isPlainObject(x)) {
        return traverse(x, function(path, value) {
          return _this._set(path, value);
        });
      }
    };

    Struct.prototype._set = function(key, value) {
      var oldValue;

      oldValue = deepGet(this.attributes, key);
      if (oldValue === value) {
        return value;
      }
      deepSet(this.attributes, key)(value);
      this._changed(key, value, oldValue);
      return value;
    };

    Struct.prototype.setAll = function(attrs) {
      var _this = this;

      traverseAll(this.attributes, function(path, value) {
        if (deepGet(attrs, path) == null) {
          return _this.unset(path.join('.'));
        }
      });
      this.set(attrs);
      return null;
    };

    Struct.prototype.unset = function(key) {
      var oldValue;

      if (this._parent != null) {
        oldValue = this.get(key);
        deepSet(this.attributes, key)(Null);
      } else {
        oldValue = deepDelete(this.attributes, key);
      }
      if (oldValue != null) {
        this._changed(key, this.get(key), oldValue);
      }
      return oldValue;
    };

    Struct.prototype.revert = function(key) {
      var newValue, oldValue;

      if (this._parent == null) {
        return;
      }
      oldValue = deepDelete(this.attributes, key);
      newValue = this.get(key);
      if (newValue !== oldValue) {
        this._changed(key, newValue, oldValue);
      }
      return oldValue;
    };

    Struct.prototype.shadow = function(klass) {
      return new (klass != null ? klass : this.constructor)({}, extendNew(this.options, {
        parent: this
      }));
    };

    Struct.prototype.original = function() {
      var _ref1, _ref2;

      return (_ref1 = (_ref2 = this._parent) != null ? _ref2.original() : void 0) != null ? _ref1 : this;
    };

    Struct.prototype.watch = function(key) {
      var _base, _ref1,
        _this = this;

      return (_ref1 = (_base = this._watches)[key]) != null ? _ref1 : _base[key] = (function() {
        var varying;

        varying = new Varying(_this.get(key));
        if (_this._parent != null) {
          _this.listenTo(_this._parent, "changed:" + key, function() {
            return varying.set(_this.get(key));
          });
        }
        _this.listenTo(_this, "changed:" + key, function(newValue) {
          return varying.set(newValue);
        });
        return varying;
      })();
    };

    Struct.prototype._changed = function(key, newValue, oldValue) {
      if (isArray(key)) {
        key = key.join('.');
      }
      this.emit("changed:" + key, newValue, oldValue);
      this.emit('anyChanged', key, newValue, oldValue);
      return null;
    };

    return Struct;

  })(Base);

  module.exports = {
    Null: Null,
    Struct: Struct
  };

}).call(this);
