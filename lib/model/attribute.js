// Generated by CoffeeScript 1.12.2
(function() {
  var Attribute, BooleanAttribute, DateAttribute, EnumAttribute, List, ListAttribute, Map, Model, ModelAttribute, NumberAttribute, ReferenceAttribute, TextAttribute, Varying, from, isFunction, types,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  from = require('../core/from');

  types = require('../core/types');

  Model = require('./model').Model;

  Map = require('../collection/map').Map;

  Varying = require('../core/varying').Varying;

  List = require('../collection/list').List;

  isFunction = require('../util/util').isFunction;

  Attribute = (function(superClass) {
    extend(Attribute, superClass);

    function Attribute(model, key) {
      this.model = model;
      this.key = key;
      Attribute.__super__.constructor.call(this);
    }

    Attribute.prototype.setValue = function(value) {
      return this.model.set(this.key, value);
    };

    Attribute.prototype.unsetValue = function() {
      return this.model.unset(this.key);
    };

    Attribute.prototype.getValue = function() {
      var value;
      value = this.model.get(this.key);
      if ((value == null) && (this["default"] != null)) {
        value = this["default"]();
        if (this.writeDefault === true) {
          this.setValue(value);
        }
      }
      return value;
    };

    Attribute.prototype.watchValue = function() {
      return this.model.watch(this.key);
    };

    Attribute.prototype["default"] = function() {};

    Attribute.prototype.writeDefault = false;

    Attribute.prototype.transient = false;

    Attribute.deserialize = function(data) {
      return data;
    };

    Attribute.prototype.serialize = function() {
      if (this.transient !== true) {
        return this.getValue();
      }
    };

    return Attribute;

  })(Model);

  TextAttribute = (function(superClass) {
    extend(TextAttribute, superClass);

    function TextAttribute() {
      return TextAttribute.__super__.constructor.apply(this, arguments);
    }

    return TextAttribute;

  })(Attribute);

  EnumAttribute = (function(superClass) {
    extend(EnumAttribute, superClass);

    function EnumAttribute() {
      return EnumAttribute.__super__.constructor.apply(this, arguments);
    }

    EnumAttribute.prototype.values = function() {
      return new List([]);
    };

    EnumAttribute.prototype.nullable = false;

    return EnumAttribute;

  })(Attribute);

  NumberAttribute = (function(superClass) {
    extend(NumberAttribute, superClass);

    function NumberAttribute() {
      return NumberAttribute.__super__.constructor.apply(this, arguments);
    }

    return NumberAttribute;

  })(Attribute);

  BooleanAttribute = (function(superClass) {
    extend(BooleanAttribute, superClass);

    function BooleanAttribute() {
      return BooleanAttribute.__super__.constructor.apply(this, arguments);
    }

    return BooleanAttribute;

  })(Attribute);

  DateAttribute = (function(superClass) {
    extend(DateAttribute, superClass);

    function DateAttribute() {
      return DateAttribute.__super__.constructor.apply(this, arguments);
    }

    DateAttribute.deserialize = function(data) {
      return new Date(data);
    };

    DateAttribute.prototype.serialize = function() {
      var ref;
      if (this.transient !== true) {
        return (ref = this.getValue()) != null ? ref.getTime() : void 0;
      }
    };

    return DateAttribute;

  })(Attribute);

  ModelAttribute = (function(superClass) {
    extend(ModelAttribute, superClass);

    function ModelAttribute() {
      return ModelAttribute.__super__.constructor.apply(this, arguments);
    }

    ModelAttribute.modelClass = Model;

    ModelAttribute.prototype.writeDefault = true;

    ModelAttribute.deserialize = function(data) {
      return this.modelClass.deserialize(data);
    };

    ModelAttribute.prototype.serialize = function() {
      if (this.transient !== true) {
        return this.constructor.modelClass.prototype.serialize.call(this.getValue());
      }
    };

    ModelAttribute.of = function(modelClass) {
      return (function(superClass1) {
        extend(_Class, superClass1);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.modelClass = modelClass;

        return _Class;

      })(this);
    };

    return ModelAttribute;

  })(Attribute);

  ListAttribute = (function(superClass) {
    extend(ListAttribute, superClass);

    function ListAttribute() {
      return ListAttribute.__super__.constructor.apply(this, arguments);
    }

    ListAttribute.listClass = List;

    ListAttribute.prototype.writeDefault = true;

    ListAttribute.deserialize = function(data) {
      return this.listClass.deserialize(data);
    };

    ListAttribute.prototype.serialize = function() {
      if (this.transient !== true) {
        return this.constructor.listClass.prototype.serialize.call(this.getValue());
      }
    };

    ListAttribute.of = function(listClass) {
      return (function(superClass1) {
        extend(_Class, superClass1);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.listClass = listClass;

        return _Class;

      })(this);
    };

    return ListAttribute;

  })(Attribute);

  ReferenceAttribute = (function(superClass) {
    extend(ReferenceAttribute, superClass);

    function ReferenceAttribute() {
      return ReferenceAttribute.__super__.constructor.apply(this, arguments);
    }

    ReferenceAttribute.prototype.isReference = true;

    ReferenceAttribute.prototype.transient = true;

    ReferenceAttribute.prototype.autoResolve = true;

    ReferenceAttribute.prototype.request = null;

    ReferenceAttribute.prototype.resolveWith = function(app) {
      var observation, request;
      if (this._resolving === true) {
        return;
      }
      this._resolving = true;
      request = isFunction(this.request) ? this.request() : this.request;
      if (request == null) {
        return;
      }
      observation = null;
      this.reactTo(this.model.watch(this.key).refCount(), (function(_this) {
        return function(count) {
          var result;
          if (count === 0 && (observation != null)) {
            observation.stop();
            return observation = null;
          } else if (count > 0 && (observation == null)) {
            result = request.all != null ? request.all.point(_this.model.pointer()).flatMap(function(request) {
              return app.resolve(request);
            }) : app.resolve(request);
            if (result == null) {
              return;
            }
            return observation = _this.reactTo(result, function(x) {
              return types.result.success.match(x, function(y) {
                return _this.setValue(y);
              });
            });
          }
        };
      })(this));
    };

    ReferenceAttribute.to = function(x) {
      return (function(superClass1) {
        extend(_Class, superClass1);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.prototype.request = x;

        return _Class;

      })(this);
    };

    return ReferenceAttribute;

  })(Attribute);

  module.exports = {
    Attribute: Attribute,
    Text: TextAttribute,
    Enum: EnumAttribute,
    Number: NumberAttribute,
    Boolean: BooleanAttribute,
    Date: DateAttribute,
    Model: ModelAttribute,
    List: ListAttribute,
    Reference: ReferenceAttribute
  };

}).call(this);
