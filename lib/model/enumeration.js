// Generated by CoffeeScript 1.12.2
(function() {
  var DerivedList, Enumeration, KeyList, Struct, Varying, deepGet, ref, traverse, traverseAll,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Varying = require('../core/varying').Varying;

  DerivedList = require('../collection/list').DerivedList;

  Struct = require('./struct').Struct;

  ref = require('../util/util'), traverse = ref.traverse, traverseAll = ref.traverseAll, deepGet = ref.deepGet;

  KeyList = (function(superClass) {
    extend(KeyList, superClass);

    function KeyList(struct1, options) {
      var ptr, ref1, ref2, scanStruct;
      this.struct = struct1;
      if (options == null) {
        options = {};
      }
      KeyList.__super__.constructor.call(this);
      this.scope = (ref1 = options.scope) != null ? ref1 : 'all';
      this.include = (ref2 = options.include) != null ? ref2 : 'values';
      this._trackedKeys = {};
      scanStruct = (function(_this) {
        return function(struct) {
          return traverse(struct.attributes, function(key) {
            return _this._addKey(key.join('.'));
          });
        };
      })(this);
      if (this.scope === 'all') {
        ptr = this.struct;
        while (ptr != null) {
          scanStruct(ptr);
          ptr = ptr._parent;
        }
      } else if (this.scope === 'direct') {
        scanStruct(this.struct);
      }
      this.listenTo(this.struct, 'anyChanged', (function(_this) {
        return function(key, newValue, oldValue) {
          var ownValue;
          if (_this.scope === 'direct') {
            ownValue = deepGet(_this.struct.attributes, key);
            if (ownValue !== newValue) {
              return;
            }
          }
          if ((newValue != null) && (oldValue == null)) {
            return _this._addKey(key);
          } else if ((oldValue != null) && (newValue == null)) {
            return _this._removeKey(key);
          }
        };
      })(this));
    }

    KeyList.prototype._addKey = function(key) {
      var i, j, parts, ref1, results;
      if (this._trackedKeys[key] === true) {
        return;
      }
      if (this.include === 'all') {
        parts = key.split('.');
        results = [];
        for (i = j = ref1 = parts.length; j > 0; i = j += -1) {
          key = parts.slice(0, i).join('.');
          if (this._trackedKeys[key] === true) {
            break;
          }
          this._trackedKeys[key] = true;
          results.push(this._add(key));
        }
        return results;
      } else {
        this._trackedKeys[key] = true;
        return this._add(key);
      }
    };

    KeyList.prototype._removeKey = function(key) {
      var idx, j, k, len, ref1;
      delete this._trackedKeys[key];
      this._removeAt(this.list.indexOf(key));
      if (this.include === 'all') {
        ref1 = this.list;
        for (idx = j = 0, len = ref1.length; j < len; idx = ++j) {
          k = ref1[idx];
          if (!(k.indexOf(key) === 0)) {
            continue;
          }
          delete this._trackedKeys[k];
          this._removeAt(idx);
        }
      }
      return null;
    };

    KeyList.prototype.mapPairs = function(f) {
      return this.flatMap((function(_this) {
        return function(key) {
          return Varying.mapAll(f, new Varying(key), _this.struct.watch(key));
        };
      })(this));
    };

    KeyList.prototype.flatMapPairs = function(f) {
      return this.flatMap((function(_this) {
        return function(key) {
          return Varying.flatMapAll(f, new Varying(key), _this.struct.watch(key));
        };
      })(this));
    };

    return KeyList;

  })(DerivedList);

  Enumeration = {
    get: function(struct, options) {
      var include, ptr, ref1, ref2, result, scanStruct, scope, traverser;
      if (options == null) {
        options = {};
      }
      scope = (ref1 = options.scope) != null ? ref1 : 'all';
      include = (ref2 = options.include) != null ? ref2 : 'values';
      result = [];
      traverser = include === 'values' ? traverse : include === 'all' ? traverseAll : void 0;
      scanStruct = (function(_this) {
        return function(struct) {
          return traverser(struct.attributes, function(key) {
            if (!(result.indexOf(key) >= 0)) {
              return result.push(key.join('.'));
            }
          });
        };
      })(this);
      if (scope === 'all') {
        ptr = struct;
        while (ptr != null) {
          scanStruct(ptr);
          ptr = ptr._parent;
        }
      } else if (scope === 'direct') {
        scanStruct(struct);
      }
      return result;
    },
    watch: function(struct, options) {
      return new KeyList(struct, options);
    }
  };

  module.exports = {
    KeyList: KeyList,
    Enumeration: Enumeration
  };

}).call(this);
