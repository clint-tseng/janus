// Generated by CoffeeScript 1.6.2
(function() {
  var DerivedList, FlattenedList, List, util, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require('./list'), List = _ref.List, DerivedList = _ref.DerivedList;

  util = require('../util/util');

  FlattenedList = (function(_super) {
    __extends(FlattenedList, _super);

    function FlattenedList(parent, options) {
      var idx, list, _i, _len, _ref1,
        _this = this;

      this.parent = parent;
      this.options = options != null ? options : {};
      FlattenedList.__super__.constructor.call(this);
      this._listListeners = new List();
      _ref1 = this.parent.list;
      for (idx = _i = 0, _len = _ref1.length; _i < _len; idx = ++_i) {
        list = _ref1[idx];
        this._addObj(list, idx);
      }
      this.parent.on('added', function(obj, idx) {
        return _this._addObj(obj, idx);
      });
      this.parent.on('moved', function(_, idx, oldIdx) {
        return 0;
      });
      this.parent.on('removed', function(obj, idx) {
        return _this._removeObj(obj, idx);
      });
    }

    FlattenedList.prototype._getOverallIdx = function(parentIdx, offset) {
      if (offset == null) {
        offset = 0;
      }
      return util.foldLeft(0)(this.parent.list.slice(0, parentIdx), function(length, x) {
        return length + ((x != null ? x.isCollection : void 0) === true ? x.length : 1);
      }) + offset;
    };

    FlattenedList.prototype._addObj = function(obj, idx) {
      var elem, event, handler, listeners, offset, _i, _len, _ref1, _results,
        _this = this;

      if ((obj != null ? obj.isCollection : void 0) === true) {
        listeners = {
          added: function(elem, offset) {
            return _this._add(elem, _this._getOverallIdx(_this._listListeners.list.indexOf(listeners), offset));
          },
          removed: function(_, offset) {
            return _this._removeAt(_this._getOverallIdx(_this._listListeners.list.indexOf(listeners), offset));
          }
        };
        for (event in listeners) {
          handler = listeners[event];
          obj.on(event, handler);
        }
        this._listListeners.add(listeners, idx);
        _ref1 = obj.list;
        _results = [];
        for (offset = _i = 0, _len = _ref1.length; _i < _len; offset = ++_i) {
          elem = _ref1[offset];
          _results.push(this._add(elem, this._getOverallIdx(idx, offset)));
        }
        return _results;
      } else {
        return this._add(obj, this._getOverallIdx(idx));
      }
    };

    FlattenedList.prototype._removeObj = function(obj, idx) {
      var event, handler, listeners, objStartIdx, _, _i, _len, _ref1;

      objStartIdx = this._getOverallIdx(idx);
      listeners = this._listListeners.removeAt(idx);
      if ((obj != null ? obj.isCollection : void 0) === true) {
        for (event in listeners) {
          handler = listeners[event];
          obj.off(event, handler);
        }
        _ref1 = obj.list;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          _ = _ref1[_i];
          this._removeAt(objStartIdx);
        }
      } else {
        this._removeAt(objStartIdx);
      }
      return null;
    };

    FlattenedList.prototype.destroy = function() {
      var event, handler, listeners, _i, _len, _ref1;

      _ref1 = this._listListeners.list;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        listeners = _ref1[_i];
        if (listeners != null) {
          for (event in listeners) {
            handler = listeners[event];
            this.parent.list[idx].off(event, handler);
          }
        }
      }
      return FlattenedList.__super__.destroy.call(this);
    };

    return FlattenedList;

  })(DerivedList);

  module.exports = {
    FlattenedList: FlattenedList
  };

}).call(this);
