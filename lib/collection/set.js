// Generated by CoffeeScript 1.6.2
(function() {
  var List, Set, Varying, util, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Varying = require('../core/varying').Varying;

  List = require('./list').List;

  util = require('../util/util');

  Set = (function(_super) {
    __extends(Set, _super);

    function Set() {
      _ref = Set.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Set.prototype._initialize = function() {
      this._watched = [];
      return this._watchers = [];
    };

    Set.prototype.add = function(elems) {
      var elem, widx, _i, _len;

      if (!util.isArray(elems)) {
        elems = [elems];
      }
      for (_i = 0, _len = elems.length; _i < _len; _i++) {
        elem = elems[_i];
        if (!(!this.has(elem))) {
          continue;
        }
        widx = this._watched.indexOf(elem);
        if (widx >= 0) {
          this._watchers[widx].set(true);
        }
        List.prototype.add.call(this, elem);
      }
      return elems;
    };

    Set.prototype.remove = function(elem) {
      var idx, widx;

      widx = this._watched.indexOf(elem);
      if (widx >= 0) {
        this._watchers[widx].set(false);
      }
      idx = this.list.indexOf(elem);
      if (!(idx >= 0)) {
        return void 0;
      }
      return List.prototype.removeAt.call(this, idx);
    };

    Set.prototype.putAll = function(elems) {
      var list, x, _i, _len;

      list = this.list.slice(0);
      if (!util.isArray(elems)) {
        elems = [elems];
      }
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        x = list[_i];
        if (elems.indexOf(x) < 0) {
          this.remove(x);
        }
      }
      return this.add(elems);
    };

    Set.prototype.has = function(elem) {
      return this.list.indexOf(elem) >= 0;
    };

    Set.prototype.watchHas = function(elem) {
      var v;

      v = new Varying(this.has(elem));
      this._watched.push(elem);
      this._watchers.push(v);
      return v;
    };

    Set.prototype.at = void 0;

    Set.prototype.watchAt = void 0;

    Set.prototype.removeAt = void 0;

    Set.prototype.move = void 0;

    Set.prototype.moveAt = void 0;

    Set.prototype.put = void 0;

    return Set;

  })(List);

  module.exports = {
    Set: Set
  };

}).call(this);
