// Generated by CoffeeScript 1.12.2
(function() {
  var Collection, Model, OrderedCollection, folds,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  Model = require('../model/model').Model;

  folds = require('./folds');

  Collection = (function(superClass) {
    extend(Collection, superClass);

    function Collection() {
      return Collection.__super__.constructor.apply(this, arguments);
    }

    Collection.prototype.isCollection = true;

    Collection.prototype.filter = function(f) {
      return new (require('./filtered-list').FilteredList)(this, f);
    };

    Collection.prototype.map = function(f) {
      return new (require('./mapped-list').MappedList)(this, f);
    };

    Collection.prototype.flatMap = function(f) {
      return new (require('./mapped-list').FlatMappedList)(this, f);
    };

    Collection.prototype.concat = function() {
      var lists;
      lists = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return new (require('./catted-list').CattedList)([this].concat(lists));
    };

    Collection.prototype.flatten = function() {
      return new (require('./flattened-list').FlattenedList)(this);
    };

    Collection.prototype.uniq = function() {
      return new (require('./uniq-list').UniqList)(this);
    };

    Collection.prototype.take = function(x) {
      return new (require('./taken-list').TakenList)(this, x);
    };

    Collection.prototype.enumeration = function() {
      return require('../model/enumeration').Enumeration.list.watch(this);
    };

    Collection.prototype.enumerate = function() {
      return require('../model/enumeration').Enumeration.list.get(this);
    };

    Collection.prototype.any = function(f) {
      return folds.any(new (require('./mapped-list').MappedList)(this, f));
    };

    Collection.prototype.fold = function(memo, f) {
      return folds.fold(this, memo, f);
    };

    Collection.prototype.scanl = function(memo, f) {
      return folds.scanl(this, memo, f);
    };

    Collection.prototype.foldl = function(memo, f) {
      return folds.foldl(this, memo, f);
    };

    Collection.prototype.min = function() {
      return folds.min(this);
    };

    Collection.prototype.max = function() {
      return folds.max(this);
    };

    Collection.prototype.sum = function() {
      return folds.sum(this);
    };

    Collection.prototype.join = function(joiner) {
      return folds.join(this, joiner);
    };

    return Collection;

  })(Model);

  OrderedCollection = (function(superClass) {
    extend(OrderedCollection, superClass);

    function OrderedCollection() {
      return OrderedCollection.__super__.constructor.apply(this, arguments);
    }

    return OrderedCollection;

  })(Collection);

  module.exports = {
    Collection: Collection,
    OrderedCollection: OrderedCollection
  };

}).call(this);
