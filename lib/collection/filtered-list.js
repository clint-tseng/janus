// Generated by CoffeeScript 1.6.2
(function() {
  var DerivedList, FilteredList, List, Varying, util, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require('./list'), List = _ref.List, DerivedList = _ref.DerivedList;

  Varying = require('../core/varying').Varying;

  util = require('../util/util');

  FilteredList = (function(_super) {
    __extends(FilteredList, _super);

    function FilteredList(parent, filterer) {
      var elem, idx, _i, _len, _ref1,
        _this = this;

      this.parent = parent;
      this.filterer = filterer;
      FilteredList.__super__.constructor.call(this);
      this._filtereds = [];
      this._idxMap = [];
      _ref1 = this.parent.list;
      for (idx = _i = 0, _len = _ref1.length; _i < _len; idx = ++_i) {
        elem = _ref1[idx];
        this._add(elem, idx);
      }
      this.parent.on('added', function(elem, idx) {
        return _this._add(elem, idx);
      });
      this.parent.on('moved', function(_, idx, oldIdx) {
        return _this._moveAt(oldIdx, idx);
      });
      this.parent.on('removed', function(elem, idx) {
        return _this._removeAt(idx);
      });
    }

    FilteredList.prototype._add = function(elem, idx) {
      var filtered, lastResult, _ref1,
        _this = this;

      this._idxMap.splice(idx, 0, (_ref1 = this._idxMap[idx - 1]) != null ? _ref1 : -1);
      lastResult = false;
      filtered = Varying.ly(this.filterer(elem)).reactNow(function(result) {
        var cidx, i, idxAdj, _i, _ref2;

        cidx = _this._filtereds.indexOf(filtered);
        if (cidx < 0) {
          cidx = idx;
        }
        if (result !== lastResult) {
          lastResult = result === true;
          idxAdj = result === true ? 1 : -1;
          if (result === false) {
            List.prototype.removeAt.call(_this, _this._idxMap[cidx]);
          }
          for (i = _i = cidx, _ref2 = _this._idxMap.length; cidx <= _ref2 ? _i < _ref2 : _i > _ref2; i = cidx <= _ref2 ? ++_i : --_i) {
            _this._idxMap[i] += idxAdj;
          }
          if (result === true) {
            return FilteredList.__super__._add.call(_this, _this.parent.at(cidx), _this._idxMap[cidx]);
          }
        }
      });
      return this._filtereds.splice(idx, 0, filtered);
    };

    FilteredList.prototype._removeAt = function(idx) {
      var adjIdx, delta, mappedIdx, _i, _ref1;

      mappedIdx = this._idxMap[idx];
      delta = idx === 0 ? mappedIdx + 1 : mappedIdx - this._idxMap[idx - 1];
      if (delta === 1) {
        FilteredList.__super__._removeAt.call(this, mappedIdx);
        for (adjIdx = _i = idx, _ref1 = this._idxMap.length; idx <= _ref1 ? _i <= _ref1 : _i >= _ref1; adjIdx = idx <= _ref1 ? ++_i : --_i) {
          this._idxMap[adjIdx] -= 1;
        }
      }
      this._filtereds.splice(idx, 1)[0].stop();
      this._idxMap.splice(idx, 1);
      return null;
    };

    FilteredList.prototype._moveAt = function(oldIdx, newIdx) {
      var delta, filterer, i, oldMappedIdx, _i, _j, _ref1, _ref2;

      filterer = this._filtereds.splice(oldIdx, 1)[0];
      this._filtereds.splice(newIdx, 0, filterer);
      oldMappedIdx = this._idxMap[oldIdx];
      delta = oldIdx === 0 ? this._idxMap[oldIdx] + 1 : oldMappedIdx - this._idxMap[oldIdx - 1];
      if (newIdx > oldIdx) {
        for (i = _i = oldIdx; oldIdx <= newIdx ? _i <= newIdx : _i >= newIdx; i = oldIdx <= newIdx ? ++_i : --_i) {
          this._idxMap[i] = this._idxMap[i + 1] - delta;
        }
        this._idxMap[newIdx] = this._idxMap[newIdx - 1] + delta;
      } else if (newIdx < oldIdx) {
        for (i = _j = oldIdx; _j >= newIdx; i = _j += -1) {
          this._idxMap[i] = ((_ref1 = this._idxMap[i - 1]) != null ? _ref1 : -1) + delta;
        }
        this._idxMap[newIdx] = ((_ref2 = this._idxMap[newIdx - 1]) != null ? _ref2 : -1) + delta;
      }
      if (delta === 1) {
        return FilteredList.__super__._moveAt.call(this, oldMappedIdx, this._idxMap[newIdx]);
      }
    };

    return FilteredList;

  })(DerivedList);

  module.exports = {
    FilteredList: FilteredList
  };

}).call(this);
