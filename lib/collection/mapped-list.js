// Generated by CoffeeScript 1.6.2
(function() {
  var DerivedList, FlatMappedList, List, MappedList, Varying, util, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require('./list'), List = _ref.List, DerivedList = _ref.DerivedList;

  Varying = require('../core/varying').Varying;

  util = require('../util/util');

  MappedList = (function(_super) {
    __extends(MappedList, _super);

    function MappedList(parent, mapper, options) {
      var elem, _i, _len, _ref1,
        _this = this;

      this.parent = parent;
      this.mapper = mapper;
      this.options = options != null ? options : {};
      MappedList.__super__.constructor.call(this);
      _ref1 = this.parent.list;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        elem = _ref1[_i];
        this._add(elem);
      }
      this.parent.on('added', function(elem, idx) {
        return _this._add(elem, idx);
      });
      this.parent.on('removed', function(_, idx) {
        return _this._removeAt(idx);
      });
      this.parent.on('moved', function(_, idx, oldIdx) {
        return _this._moveAt(oldIdx, idx);
      });
    }

    MappedList.prototype._add = function(elem, idx) {
      return MappedList.__super__._add.call(this, this.mapper(elem), idx);
    };

    return MappedList;

  })(DerivedList);

  FlatMappedList = (function(_super) {
    __extends(FlatMappedList, _super);

    function FlatMappedList(parent, mapper, options) {
      var elem, idx, _i, _len, _ref1,
        _this = this;

      this.parent = parent;
      this.mapper = mapper;
      this.options = options != null ? options : {};
      FlatMappedList.__super__.constructor.call(this);
      this._bindings = new List();
      _ref1 = this.parent.list;
      for (idx = _i = 0, _len = _ref1.length; _i < _len; idx = ++_i) {
        elem = _ref1[idx];
        this._add(elem, idx);
      }
      this.parent.on('added', function(elem, idx) {
        return _this._add(elem, idx);
      });
      this.parent.on('removed', function(_, idx) {
        return _this._removeAt(idx);
      });
      this.parent.on('moved', function(_, idx, oldIdx) {
        return _this._moveAt(idx, oldIdx);
      });
    }

    FlatMappedList.prototype._add = function(elem, idx) {
      var binding, initial, mapping, wrapped,
        _this = this;

      wrapped = new Varying(elem);
      initial = null;
      mapping = wrapped.flatMap(this.mapper);
      binding = mapping.reactNow(function(newValue) {
        var bidx;

        if (initial == null) {
          initial = newValue;
        }
        bidx = _this._bindings.list.indexOf(binding);
        if (bidx >= 0) {
          return _this._put(newValue, bidx);
        }
      });
      this._bindings.add(binding, idx);
      return FlatMappedList.__super__._add.call(this, initial, idx);
    };

    FlatMappedList.prototype._removeAt = function(idx) {
      this._bindings.removeAt(idx).stop();
      return FlatMappedList.__super__._removeAt.call(this, idx);
    };

    FlatMappedList.prototype._moveAt = function(idx, oldIdx) {
      this._bindings.moveAt(oldIdx, idx);
      return FlatMappedList.__super__._moveAt.call(this, oldIdx, idx);
    };

    return FlatMappedList;

  })(DerivedList);

  util.extend(module.exports, {
    FlatMappedList: FlatMappedList,
    MappedList: MappedList
  });

}).call(this);
