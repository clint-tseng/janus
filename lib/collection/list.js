// Generated by CoffeeScript 1.12.2
(function() {
  var Base, DerivedList, List, Model, OrderedCollection, Traversal$, Varying, util,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  Base = require('../core/base').Base;

  Varying = require('../core/varying').Varying;

  OrderedCollection = require('./collection').OrderedCollection;

  Model = require('../model/model').Model;

  util = require('../util/util');

  Traversal$ = null;

  List = (function(superClass) {
    extend(List, superClass);

    function List(list, options) {
      if (list == null) {
        list = [];
      }
      List.__super__.constructor.call(this, {}, options);
      this.list = [];
      this.add(list);
    }

    List.prototype.add = function(elems, idx) {
      var elem, j, len, subidx;
      if (idx == null) {
        idx = this.list.length;
      }
      if (!util.isArray(elems)) {
        elems = [elems];
      }
      if (idx === this.list.length && elems.length === 1) {
        this.list.push(elems[0]);
      } else {
        if (idx > this.list.length) {
          this.list[idx - 1] = null;
          delete this.list[idx - 1];
        }
        Array.prototype.splice.apply(this.list, [idx, 0].concat(elems));
      }
      for (subidx = j = 0, len = elems.length; j < len; subidx = ++j) {
        elem = elems[subidx];
        this.emit('added', elem, idx + subidx);
        if (elem != null) {
          if (typeof elem.emit === "function") {
            elem.emit('addedTo', this, idx + subidx);
          }
        }
        if ((elem != null ? elem.isBase : void 0) === true) {
          (function(_this) {
            return (function(elem) {
              return _this.listenTo(elem, 'destroying', function() {
                return _this.remove(elem);
              });
            });
          })(this)(elem);
        }
      }
      return elems;
    };

    List.prototype.remove = function(which) {
      var idx;
      idx = this.list.indexOf(which);
      if (!(idx >= 0)) {
        return void 0;
      }
      return this.removeAt(idx);
    };

    List.prototype.removeAt = function(idx) {
      var removed;
      if (idx < 0) {
        idx = this.list.length + idx;
      }
      if (idx < 0 || idx >= this.list.length) {
        return;
      }
      removed = idx === 0 ? this.list.shift() : idx === this.list.length - 1 ? this.list.pop() : this.list.splice(idx, 1)[0];
      this.emit('removed', removed, idx);
      if (removed != null) {
        if (typeof removed.emit === "function") {
          removed.emit('removedFrom', this, idx);
        }
      }
      return removed;
    };

    List.prototype.move = function(elem, idx) {
      var oldIdx;
      oldIdx = this.list.indexOf(elem);
      if (!(oldIdx >= 0)) {
        return;
      }
      return this.moveAt(oldIdx, idx);
    };

    List.prototype.moveAt = function(oldIdx, idx) {
      var elem;
      elem = this.list[oldIdx];
      this.list.splice(oldIdx, 1);
      this.list.splice(idx, 0, elem);
      this.emit('moved', elem, idx, oldIdx);
      if (elem != null) {
        if (typeof elem.emit === "function") {
          elem.emit('movedIn', this, idx, oldIdx);
        }
      }
      return elem;
    };

    List.prototype.removeAll = function() {
      var elem, results;
      results = [];
      while (this.list.length > 0) {
        elem = this.list.shift();
        this.emit('removed', elem, 0);
        if (elem != null) {
          if (typeof elem.emit === "function") {
            elem.emit('removedFrom', this, 0);
          }
        }
        results.push(elem);
      }
      return results;
    };

    List.prototype.at = function(idx) {
      if (idx >= 0) {
        return this.list[idx];
      } else {
        return this.list[this.list.length + idx];
      }
    };

    List.prototype.watchAt = function(idx) {
      var result;
      if ((idx != null ? idx.isVarying : void 0) === true) {
        return idx.flatMap((function(_this) {
          return function(tidx) {
            return _this.watchAt(tidx);
          };
        })(this));
      }
      result = new Varying(this.at(idx));
      this.on('added', (function(_this) {
        return function(elem, midx) {
          if (idx === midx) {
            return result.set(elem);
          } else if ((idx > 0) && (midx < idx)) {
            return result.set(_this.at(idx));
          } else if ((idx < 0) && (midx >= (_this.list.length + idx))) {
            return result.set(_this.at(idx));
          }
        };
      })(this));
      this.on('moved', (function(_this) {
        return function(elem, newIdx, oldIdx) {
          var tidx;
          tidx = idx < 0 ? _this.list.length + idx : idx;
          if (tidx === newIdx) {
            return result.set(elem);
          } else if (tidx === oldIdx) {
            return result.set(_this.at(tidx));
          } else if (tidx > oldIdx && tidx < newIdx) {
            return result.set(_this.at(tidx));
          } else if (tidx < oldIdx && tidx > newIdx) {
            return result.set(_this.at(tidx));
          }
        };
      })(this));
      this.on('removed', (function(_this) {
        return function(_, midx) {
          if ((idx >= 0) && (midx <= idx)) {
            return result.set(_this.at(idx));
          } else if ((idx < 0) && (midx >= (_this.list.length + idx))) {
            return result.set(_this.at(idx));
          }
        };
      })(this));
      return result;
    };

    Object.defineProperty(List.prototype, 'length', {
      get: function() {
        return this.list.length;
      }
    });

    List.prototype.watchLength = function() {
      var result;
      result = new Varying(this.list.length);
      this.on('added', function() {
        return result.set(this.list.length);
      });
      this.on('removed', function() {
        return result.set(this.list.length);
      });
      return result;
    };

    List.prototype.put = function(list, idx) {
      var elem, j, k, len, len1, ref, removed, subidx;
      if (!util.isArray(list)) {
        list = [list];
      }
      if (idx > this.list.length) {
        this.list[idx] = null;
        delete this.list[idx];
      }
      removed = (ref = this.list).splice.apply(ref, [idx, list.length].concat(slice.call(list)));
      for (subidx = j = 0, len = removed.length; j < len; subidx = ++j) {
        elem = removed[subidx];
        this.emit('removed', elem, idx + subidx);
        if (elem != null) {
          if (typeof elem.emit === "function") {
            elem.emit('removedFrom', this, idx + subidx);
          }
        }
      }
      for (subidx = k = 0, len1 = list.length; k < len1; subidx = ++k) {
        elem = list[subidx];
        this.emit('added', elem, idx + subidx);
        if (elem != null) {
          if (typeof elem.emit === "function") {
            elem.emit('addedTo', this, idx + subidx);
          }
        }
      }
      return removed;
    };

    List.prototype.putAll = function(list) {
      var elem, i, j, k, len, len1, oldIdx, ref;
      ref = this.list.slice();
      for (j = 0, len = ref.length; j < len; j++) {
        elem = ref[j];
        if (!(list.indexOf(elem) >= 0)) {
          this.remove(elem);
        }
      }
      for (i = k = 0, len1 = list.length; k < len1; i = ++k) {
        elem = list[i];
        if (this.list[i] === elem) {
          continue;
        }
        oldIdx = this.list.indexOf(elem);
        if (oldIdx >= 0) {
          this.move(elem, i);
        } else {
          this.add(elem, i);
        }
      }
      return list;
    };

    List.prototype.shadow = function() {
      var item, newArray;
      newArray = (function() {
        var j, len, ref, results;
        ref = this.list;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          item = ref[j];
          if ((item != null ? item.isEnumerable : void 0) === true) {
            results.push(item.shadow());
          } else {
            results.push(item);
          }
        }
        return results;
      }).call(this);
      return new this.constructor(newArray, {
        parent: this
      });
    };

    List.deserialize = function(data) {
      var datum, items;
      items = (function() {
        var j, len, results;
        if ((this.modelClass != null) && (this.modelClass.prototype.isModel === true || this.modelClass.prototype.isCollection === true)) {
          results = [];
          for (j = 0, len = data.length; j < len; j++) {
            datum = data[j];
            results.push(this.modelClass.deserialize(datum));
          }
          return results;
        } else {
          return data.slice();
        }
      }).call(this);
      return new this(items);
    };

    List.prototype.watchModified = function() {
      if (this._parent != null) {
        return Varying.flatMapAll(this.watchLength(), this._parent.watchLength(), (function(_this) {
          return function(la, lb) {
            if (la !== lb) {
              return true;
            } else {
              if (Traversal$ == null) {
                Traversal$ = require('../model/traversal').Traversal;
              }
              return Traversal$.asList(_this, Traversal$["default"].modified.map, null, Traversal$["default"].modified.reduce);
            }
          };
        })(this));
      } else {
        return new Varying(false);
      }
    };

    List.prototype.watchDiff = function(other) {
      if ((other != null ? other.isCollection : void 0) === true) {
        return Varying.flatMapAll(this.watchLength(), other.watchLength(), (function(_this) {
          return function(la, lb) {
            if (la !== lb) {
              return true;
            } else {
              if (Traversal$ == null) {
                Traversal$ = require('./traversal').Traversal;
              }
              return Traversal$.asList(_this, Traversal$["default"].diff.map, {
                other: other
              }, Traversal$["default"].diff.reduce);
            }
          };
        })(this));
      } else {
        return new Varying(true);
      }
    };

    return List;

  })(OrderedCollection);

  DerivedList = (function(superClass) {
    var j, len, method, ref;

    extend(DerivedList, superClass);

    function DerivedList() {
      return DerivedList.__super__.constructor.apply(this, arguments);
    }

    ref = ['add', 'remove', 'removeAt', 'removeAll', 'put', 'putAll', 'move', 'moveAt'];
    for (j = 0, len = ref.length; j < len; j++) {
      method = ref[j];
      DerivedList.prototype["_" + method] = DerivedList.__super__[method];
      DerivedList.prototype[method] = (function() {});
    }

    DerivedList.prototype.shadow = function() {
      return this;
    };

    return DerivedList;

  })(List);

  module.exports = {
    List: List,
    DerivedList: DerivedList
  };

}).call(this);
