// Generated by CoffeeScript 1.12.2
(function() {
  var Base, DerivedList, List, OrderedMappable, Varying, util,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Base = require('../core/base').Base;

  Varying = require('../core/varying').Varying;

  OrderedMappable = require('./collection').OrderedMappable;

  util = require('../util/util');

  List = (function(superClass) {
    var _at, _watchAt;

    extend(List, superClass);

    List.prototype.isList = true;

    function List(list, options) {
      if (list == null) {
        list = [];
      }
      if ((options != null ? options.parent : void 0) != null) {
        this._parent = options.parent;
      }
      List.__super__.constructor.call(this, {}, options);
      if (typeof this._initialize === "function") {
        this._initialize();
      }
      this.list = [];
      this.add(list);
    }

    List.prototype.add = function(elems, idx) {
      var elem, i, len, subidx;
      if (idx == null) {
        idx = this.list.length;
      }
      if (!util.isArray(elems)) {
        elems = [elems];
      }
      if (idx === this.list.length && elems.length === 1) {
        this.list.push(elems[0]);
      } else {
        if (idx > this.list.length) {
          this.list[idx - 1] = null;
          delete this.list[idx - 1];
        }
        Array.prototype.splice.apply(this.list, [idx, 0].concat(elems));
      }
      for (subidx = i = 0, len = elems.length; i < len; subidx = ++i) {
        elem = elems[subidx];
        this.emit('added', elem, idx + subidx);
        if (elem != null) {
          if (typeof elem.emit === "function") {
            elem.emit('addedTo', this, idx + subidx);
          }
        }
        if (util.isFunction(elem != null ? elem.destroy : void 0) && (this.isDerivedList !== true)) {
          (function(_this) {
            return (function(elem) {
              return _this.listenTo(elem, 'destroying', function() {
                return _this.remove(elem);
              });
            });
          })(this)(elem);
        }
      }
    };

    List.prototype.set = function(idx, value) {
      var removed;
      if (idx < 0) {
        idx = this.length + idx;
      }
      if (0 <= idx && idx < this.length) {
        removed = this.list[idx];
        this.emit('removed', removed, idx);
        if (removed != null) {
          if (typeof removed.emit === "function") {
            removed.emit('removedFrom', this, idx);
          }
        }
      }
      this.list[idx] = value;
      this.emit('added', value, idx);
      if (value != null) {
        if (typeof value.emit === "function") {
          value.emit('addedTo', this, idx);
        }
      }
    };

    List.prototype.remove = function(which) {
      var idx;
      idx = this.list.indexOf(which);
      if (!(idx >= 0)) {
        return void 0;
      }
      return this.removeAt(idx);
    };

    List.prototype.removeAt = function(idx) {
      var removed;
      if (idx < 0) {
        idx = this.list.length + idx;
      }
      if (idx < 0 || idx >= this.list.length) {
        return;
      }
      removed = idx === 0 ? this.list.shift() : idx === this.list.length - 1 ? this.list.pop() : this.list.splice(idx, 1)[0];
      this.emit('removed', removed, idx);
      if (removed != null) {
        if (typeof removed.emit === "function") {
          removed.emit('removedFrom', this, idx);
        }
      }
      return removed;
    };

    List.prototype.move = function(elem, idx) {
      var oldIdx;
      oldIdx = this.list.indexOf(elem);
      if (!(oldIdx >= 0)) {
        return;
      }
      return this.moveAt(oldIdx, idx);
    };

    List.prototype.moveAt = function(oldIdx, idx) {
      var elem;
      if (oldIdx < 0) {
        oldIdx = this.length + oldIdx;
      }
      if (idx < 0) {
        idx = this.length + idx;
      }
      elem = this.list[oldIdx];
      this.list.splice(oldIdx, 1);
      this.list.splice(idx, 0, elem);
      this.emit('moved', elem, idx, oldIdx);
      if (elem != null) {
        if (typeof elem.emit === "function") {
          elem.emit('movedIn', this, idx, oldIdx);
        }
      }
      return elem;
    };

    List.prototype.removeAll = function() {
      var elem, results;
      results = [];
      while (this.list.length > 0) {
        elem = this.list.shift();
        this.emit('removed', elem, 0);
        if (elem != null) {
          if (typeof elem.emit === "function") {
            elem.emit('removedFrom', this, 0);
          }
        }
        results.push(elem);
      }
      return results;
    };

    _at = function(idx) {
      if (idx >= 0) {
        return this.list[idx];
      } else {
        return this.list[this.list.length + idx];
      }
    };

    List.prototype.at = _at;

    List.prototype.get = _at;

    _watchAt = function(idx) {
      var result;
      if ((idx != null ? idx.isVarying : void 0) === true) {
        return idx.flatMap((function(_this) {
          return function(tidx) {
            return _this.watchAt(tidx);
          };
        })(this));
      }
      result = new Varying(this.at(idx));
      this.listenTo(this, 'added', (function(_this) {
        return function(elem, midx) {
          if (idx === midx) {
            return result.set(elem);
          } else if ((idx > 0) && (midx < idx)) {
            return result.set(_this.at(idx));
          } else if ((idx < 0) && (midx >= (_this.list.length + idx))) {
            return result.set(_this.at(idx));
          }
        };
      })(this));
      this.listenTo(this, 'moved', (function(_this) {
        return function(elem, newIdx, oldIdx) {
          var tidx;
          tidx = idx < 0 ? _this.list.length + idx : idx;
          if (tidx === newIdx) {
            return result.set(elem);
          } else if (tidx === oldIdx) {
            return result.set(_this.at(tidx));
          } else if (tidx > oldIdx && tidx < newIdx) {
            return result.set(_this.at(tidx));
          } else if (tidx < oldIdx && tidx > newIdx) {
            return result.set(_this.at(tidx));
          }
        };
      })(this));
      this.listenTo(this, 'removed', (function(_this) {
        return function(_, midx) {
          if ((idx >= 0) && (midx <= idx)) {
            return result.set(_this.at(idx));
          } else if ((idx < 0) && (midx >= (_this.list.length + idx))) {
            return result.set(_this.at(idx));
          }
        };
      })(this));
      return result;
    };

    List.prototype.watchAt = _watchAt;

    List.prototype.watch = _watchAt;

    Object.defineProperty(List.prototype, 'length', {
      get: function() {
        return this.list.length;
      }
    });

    List.prototype.watchLength = function() {
      return this.watchLength$ != null ? this.watchLength$ : this.watchLength$ = Varying.managed((function() {
        return new Base();
      }), (function(_this) {
        return function(listener) {
          var result;
          result = new Varying(_this.list.length);
          listener.listenTo(_this, 'added', function() {
            return result.set(_this.list.length);
          });
          listener.listenTo(_this, 'removed', function() {
            return result.set(_this.list.length);
          });
          return result;
        };
      })(this));
    };

    List.prototype.empty = function() {
      return this.length === 0;
    };

    List.prototype.watchEmpty = function() {
      return this.watchLength().map(function(length) {
        return length === 0;
      });
    };

    List.prototype.nonEmpty = function() {
      return this.length > 0;
    };

    List.prototype.watchNonEmpty = function() {
      return this.watchLength().map(function(length) {
        return length > 0;
      });
    };

    List.prototype.shadow = function() {
      var item, newArray;
      newArray = (function() {
        var i, len, ref, results;
        ref = this.list;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if ((item != null ? item.isEnumerable : void 0) === true) {
            results.push(item.shadow());
          } else {
            results.push(item);
          }
        }
        return results;
      }).call(this);
      return new this.constructor(newArray, {
        parent: this
      });
    };

    if (typeof Symbol !== 'undefined') {
      List.prototype[Symbol.iterator] = function() {
        return this.list[Symbol.iterator]();
      };
    }

    List.deserialize = function(data) {
      var datum, items;
      items = (function() {
        var i, len, results;
        if ((this.modelClass != null) && util.isFunction(this.modelClass.deserialize)) {
          results = [];
          for (i = 0, len = data.length; i < len; i++) {
            datum = data[i];
            results.push(this.modelClass.deserialize(datum));
          }
          return results;
        } else {
          return data;
        }
      }).call(this);
      return new this(items);
    };

    List.of = function(modelClass) {
      return (function(superClass1) {
        extend(_Class, superClass1);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.modelClass = modelClass;

        return _Class;

      })(this);
    };

    return List;

  })(OrderedMappable);

  DerivedList = (function(superClass) {
    var i, len, method, ref, roError;

    extend(DerivedList, superClass);

    DerivedList.prototype.isDerivedList = true;

    function DerivedList() {
      OrderedMappable.call(this);
      this.list = [];
      if (typeof this._initialize === "function") {
        this._initialize();
      }
    }

    roError = function() {
      throw new Error('this list is read-only');
    };

    ref = ['add', 'remove', 'removeAt', 'removeAll', 'set', 'move', 'moveAt'];
    for (i = 0, len = ref.length; i < len; i++) {
      method = ref[i];
      DerivedList.prototype["_" + method] = DerivedList.__super__[method];
      DerivedList.prototype[method] = roError;
    }

    DerivedList.prototype.shadow = function() {
      return this;
    };

    return DerivedList;

  })(List);

  List.Derived = DerivedList;

  module.exports = {
    List: List,
    DerivedList: DerivedList
  };

}).call(this);
