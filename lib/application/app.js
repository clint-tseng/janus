// Generated by CoffeeScript 1.12.2
(function() {
  var App, Library, LibraryAttribute, Model, Resolver, attribute, attributes, isArray, isFunction, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Model = require('../model/model').Model;

  attribute = require('../model/schema').attribute;

  attributes = require('../model/attribute');

  Library = require('./library').Library;

  Resolver = require('../model/resolver').Resolver;

  ref = require('../util/util'), isFunction = ref.isFunction, isArray = ref.isArray;

  LibraryAttribute = (function(superClass) {
    extend(LibraryAttribute, superClass);

    function LibraryAttribute() {
      return LibraryAttribute.__super__.constructor.apply(this, arguments);
    }

    LibraryAttribute.prototype["default"] = function() {
      return new Library();
    };

    LibraryAttribute.prototype.writeDefault = true;

    return LibraryAttribute;

  })(attributes.Attribute);

  App = (function(superClass) {
    extend(App, superClass);

    function App() {
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.view = function(subject, criteria, options) {
      var i, key, keys, klass, len, ref1, resolve, resolveSource, view;
      if (criteria == null) {
        criteria = {};
      }
      if (options == null) {
        options = {};
      }
      klass = this.get('views').get(subject, criteria);
      if (klass == null) {
        return;
      }
      view = new klass(subject, Object.assign({
        app: this
      }, options));
      this.emit('createdView', view);
      if (subject != null) {
        if (typeof subject.autoResolveWith === "function") {
          subject.autoResolveWith(this);
        }
        resolveSource = (ref1 = options.resolve) != null ? ref1 : view.resolve;
        if ((resolveSource != null) && isFunction(subject.attribute)) {
          resolve = isFunction(resolveSource) ? resolveSource() : resolveSource;
          keys = isArray(resolve) ? resolve : [resolve];
          for (i = 0, len = keys.length; i < len; i++) {
            key = keys[i];
            if (!((attribute = subject.attribute(key)) != null)) {
              continue;
            }
            if (attribute.isReference === true) {
              attribute.resolveWith(this);
            }
            if (isFunction(subject.watch)) {
              view.reactTo(subject.watch(key), (function() {}));
            }
          }
        }
      }
      return view;
    };

    App.prototype.resolve = function(request) {
      var result;
      result = (this._resolver$ != null ? this._resolver$ : this._resolver$ = this.resolver())(request);
      if (result != null) {
        this.emit('resolvedRequest', request, result);
      }
      return result;
    };

    App.prototype.resolver = function() {
      return Resolver.fromLibrary(this.get('resolvers'));
    };

    return App;

  })(Model.build(attribute('views', LibraryAttribute), attribute('resolvers', LibraryAttribute)));

  module.exports = {
    App: App
  };

}).call(this);
