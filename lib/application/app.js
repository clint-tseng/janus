// Generated by CoffeeScript 1.12.2
(function() {
  var App, Library, List, Model, attribute, util,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Model = require('../model/model').Model;

  attribute = require('../model/attribute');

  List = require('../collection/list').List;

  Library = require('./library').Library;

  util = require('../util/util');

  App = (function(superClass) {
    extend(App, superClass);

    function App() {
      return App.__super__.constructor.apply(this, arguments);
    }

    App["default"]('views', function() {
      return new Library();
    });

    App["default"]('stores', function() {
      return new Library();
    });

    App["default"]('stack', (function() {
      return new List();
    }), attribute.CollectionAttribute);

    App.prototype.vend = function(type, obj, options) {
      var app, library, result;
      if (options == null) {
        options = {};
      }
      library = this.get(type);
      if ((library != null ? library.isLibrary : void 0) !== true) {
        return;
      }
      app = this["with"]({
        stack: new List(this.get('stack').list.concat([obj]))
      });
      result = library.get(obj, util.extendNew(options, {
        options: util.extendNew({
          app: app
        }, options.options)
      }));
      if (result != null) {
        this.emit('vended', type, result);
      }
      return result;
    };

    App.prototype.vendView = function(obj, options) {
      return this.vend('views', obj, options);
    };

    App.prototype.vendStore = function(obj, options) {
      return this.vend('stores', obj, options);
    };

    App.prototype.stack = function() {
      return this.get('stack').shadow();
    };

    App.prototype.resolve = function(key) {
      return App.__super__.resolve.call(this, key, this);
    };

    return App;

  })(Model);

  module.exports = {
    App: App
  };

}).call(this);
