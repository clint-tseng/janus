// Generated by CoffeeScript 1.12.2
(function() {
  var ComposedVarying, FlatMappedVarying, FlattenedVarying, MappedVarying, Varied, Varying, fix, identity, isFunction, nothing, ref, uniqueId,
    slice = [].slice,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('../util/util'), isFunction = ref.isFunction, fix = ref.fix, uniqueId = ref.uniqueId;

  Varying = (function() {
    var _pure;

    Varying.prototype.isVarying = true;

    function Varying(value) {
      this.set(value);
      this._observers = {};
      this._refCount = 0;
      this._generation = 0;
    }

    Varying.prototype.map = function(f) {
      return new MappedVarying(this, f);
    };

    Varying.prototype.flatten = function() {
      return new FlattenedVarying(this);
    };

    Varying.prototype.flatMap = function(f) {
      return new FlatMappedVarying(this, f);
    };

    Varying.prototype.react = function(f_) {
      var id, ref1;
      id = uniqueId();
      this._refCount += 1;
      if ((ref1 = this.refCount$) != null) {
        ref1.set(this._refCount);
      }
      return this._observers[id] = new Varied(id, f_, (function(_this) {
        return function() {
          var ref2;
          delete _this._observers[id];
          _this._refCount -= 1;
          return (ref2 = _this.refCount$) != null ? ref2.set(_this._refCount) : void 0;
        };
      })(this));
    };

    Varying.prototype.reactNow = function(f_) {
      var varied;
      varied = this.react(f_);
      f_.call(varied, this.get());
      return varied;
    };

    Varying.prototype.set = function(value) {
      var _, generation, observer, ref1;
      if (value === this._value) {
        return;
      }
      generation = this._generation += 1;
      this._value = value;
      ref1 = this._observers;
      for (_ in ref1) {
        observer = ref1[_];
        observer.f_(this._value);
        if (generation !== this._generation) {
          return;
        }
      }
      return null;
    };

    Varying.prototype.get = function() {
      return this._value;
    };

    Varying.prototype.refCount = function() {
      return this.refCount$ != null ? this.refCount$ : this.refCount$ = new Varying(this._refCount);
    };

    _pure = function(flat) {
      return function() {
        var args, f;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        if (isFunction(args[0]) && (args[0].react == null)) {
          f = args[0];
          return (fix(function(curry) {
            return function(args) {
              if (args.length < f.length) {
                return function() {
                  var more;
                  more = 1 <= arguments.length ? slice.call(arguments, 0) : [];
                  return curry(args.concat(more));
                };
              } else {
                return new ComposedVarying(args, f, flat);
              }
            };
          }))(args.slice(1));
        } else {
          f = args.pop();
          return new ComposedVarying(args, f, flat);
        }
      };
    };

    Varying.pure = _pure(false);

    Varying.mapAll = Varying.pure;

    Varying.flatMapAll = _pure(true);

    Varying.ly = function(x) {
      if ((x != null ? x.isVarying : void 0) === true) {
        return x;
      } else {
        return new Varying(x);
      }
    };

    return Varying;

  })();

  Varied = (function() {
    function Varied(id1, f_1, _stop) {
      this.id = id1;
      this.f_ = f_1;
      this._stop = _stop;
    }

    Varied.prototype.stop = function() {
      this.stopped = true;
      return this._stop();
    };

    return Varied;

  })();

  identity = function(x) {
    return x;
  };

  nothing = {};

  FlatMappedVarying = (function(superClass) {
    var _react;

    extend(FlatMappedVarying, superClass);

    function FlatMappedVarying(_parent, _f, _flatten) {
      this._parent = _parent;
      this._f = _f != null ? _f : identity;
      this._flatten = _flatten != null ? _flatten : true;
      this._observers = {};
      this._internalObservers = {};
      this._refCount = 0;
    }

    _react = function(self, callback, immediate) {
      var id, ignoreFirst, lastInnerVaried, lastValue, onValue, parentVaried, varied;
      id = uniqueId();
      self._observers[id] = varied = new Varied(id, callback, function() {
        delete self._observers[id];
        if (typeof lastInnerVaried !== "undefined" && lastInnerVaried !== null) {
          lastInnerVaried.stop();
        }
        return parentVaried.stop();
      });
      lastValue = nothing;
      lastInnerVaried = null;
      ignoreFirst = true;
      onValue = function(value) {
        if (self._flatten === true && this === parentVaried) {
          if (lastInnerVaried != null) {
            lastInnerVaried.stop();
          }
          if ((value != null ? value.isVarying : void 0) === true) {
            lastInnerVaried = value.reactNow(onValue);
            return;
          } else {
            lastInnerVaried = null;
          }
        }
        if (value === lastValue) {
          return;
        }
        if (!(immediate === false && ignoreFirst === true)) {
          callback.call(varied, value);
        }
        return lastValue = value;
      };
      parentVaried = self._bind(onValue);
      if (self._flatten === true || immediate === true) {
        onValue.call(parentVaried, self._immediate());
      }
      ignoreFirst = false;
      return varied;
    };

    FlatMappedVarying.prototype.react = function(f_) {
      return _react(this, f_, false);
    };

    FlatMappedVarying.prototype.reactNow = function(f_) {
      return _react(this, f_, true);
    };

    FlatMappedVarying.prototype._bind = function(callback) {
      var id, ref1, varied;
      id = uniqueId();
      varied = new Varied(id, callback, (function(_this) {
        return function() {
          var ref1;
          _this._refCount -= 1;
          if ((ref1 = _this.refCount$) != null) {
            ref1.set(_this._refCount);
          }
          delete _this._internalObservers[id];
          if (_this._refCount === 0) {
            return _this._parentVaried.stop();
          }
        };
      })(this));
      if (this._refCount === 0) {
        this._parentVaried = this._parent.react((function(_this) {
          return function(raw) {
            var _, mapped, o, ref1;
            mapped = _this._f.call(null, raw);
            ref1 = _this._internalObservers;
            for (_ in ref1) {
              o = ref1[_];
              o.f_(mapped);
            }
            return null;
          };
        })(this));
      }
      this._refCount += 1;
      if ((ref1 = this.refCount$) != null) {
        ref1.set(this._refCount);
      }
      return this._internalObservers[id] = varied;
    };

    FlatMappedVarying.prototype._immediate = function() {
      return this._f.call(null, this._parent.get());
    };

    FlatMappedVarying.prototype.set = null;

    FlatMappedVarying.prototype.get = function() {
      var result;
      result = this._immediate();
      if (this._flatten === true && (result != null ? result.isVarying : void 0) === true) {
        return result.get();
      } else {
        return result;
      }
    };

    return FlatMappedVarying;

  })(Varying);

  FlattenedVarying = (function(superClass) {
    extend(FlattenedVarying, superClass);

    function FlattenedVarying(parent) {
      FlattenedVarying.__super__.constructor.call(this, parent);
    }

    return FlattenedVarying;

  })(FlatMappedVarying);

  MappedVarying = (function(superClass) {
    extend(MappedVarying, superClass);

    function MappedVarying(parent, f) {
      MappedVarying.__super__.constructor.call(this, parent, f, false);
    }

    return MappedVarying;

  })(FlatMappedVarying);

  ComposedVarying = (function(superClass) {
    extend(ComposedVarying, superClass);

    function ComposedVarying(_applicants, _f, _flatten) {
      this._applicants = _applicants;
      this._f = _f != null ? _f : identity;
      this._flatten = _flatten != null ? _flatten : false;
      this._observers = {};
      this._internalObservers = {};
      this._refCount = 0;
      this._partial = [];
      this._parentVarieds = [];
    }

    ComposedVarying.prototype._bind = function(callback) {
      var a, id, idx, ref1, varied;
      id = uniqueId();
      varied = new Varied(id, callback, (function(_this) {
        return function() {
          var i, len, ref1, ref2, results, v;
          _this._refCount -= 1;
          if ((ref1 = _this.refCount$) != null) {
            ref1.set(_this._refCount);
          }
          delete _this._internalObservers[id];
          if (_this._refCount === 0) {
            ref2 = _this._parentVarieds;
            results = [];
            for (i = 0, len = ref2.length; i < len; i++) {
              v = ref2[i];
              results.push(v.stop());
            }
            return results;
          }
        };
      })(this));
      if (this._refCount === 0) {
        this._parentVarieds = (function() {
          var i, len, ref1, results;
          ref1 = this._applicants;
          results = [];
          for (idx = i = 0, len = ref1.length; i < len; idx = ++i) {
            a = ref1[idx];
            results.push((function(_this) {
              return function(a, idx) {
                return a.reactNow(function(value) {
                  var _, o, ref2;
                  _this._partial[idx] = value;
                  ref2 = _this._internalObservers;
                  for (_ in ref2) {
                    o = ref2[_];
                    o.f_(_this._f.apply(_this._parentVarieds[idx], _this._partial));
                  }
                  return null;
                });
              };
            })(this)(a, idx));
          }
          return results;
        }).call(this);
      }
      this._refCount += 1;
      if ((ref1 = this.refCount$) != null) {
        ref1.set(this._refCount);
      }
      return this._internalObservers[id] = varied;
    };

    ComposedVarying.prototype._immediate = function() {
      var a;
      return this._f.apply(null, (function() {
        var i, len, ref1, results;
        ref1 = this._applicants;
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
          a = ref1[i];
          results.push(a.get());
        }
        return results;
      }).call(this));
    };

    return ComposedVarying;

  })(FlatMappedVarying);

  module.exports = {
    Varying: Varying,
    Varied: Varied,
    FlatMappedVarying: FlatMappedVarying,
    FlattenedVarying: FlattenedVarying,
    MappedVarying: MappedVarying,
    ComposedVarying: ComposedVarying
  };

}).call(this);
