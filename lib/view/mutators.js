// Generated by CoffeeScript 1.6.2
(function() {
  var Varying, doPoint, extendNew, isPrimitive, mutators, safe, terminate, _ref;

  Varying = require('../core/varying').Varying;

  _ref = require('../util/util'), isPrimitive = _ref.isPrimitive, extendNew = _ref.extendNew;

  safe = function(x) {
    if (isPrimitive(x)) {
      return x.toString();
    } else {
      return '';
    }
  };

  terminate = function(x) {
    if (x.point != null) {
      return x;
    } else {
      return x.all;
    }
  };

  doPoint = function(x, point) {
    if ((x != null ? x.point : void 0) != null) {
      return x.point(point);
    } else if ((x != null ? x.all : void 0) != null) {
      return x.all.point(point);
    } else {
      return Varying.ly(x);
    }
  };

  mutators = {
    attr: function(prop, data) {
      return function(dom, point) {
        return terminate(data).point(point).reactNow(function(x) {
          return dom.attr(prop, safe(x));
        });
      };
    },
    classGroup: function(prefix, data) {
      return function(dom, point) {
        return terminate(data).point(point).reactNow(function(x) {
          var existing, y, _i, _len, _ref1, _ref2;

          existing = (_ref1 = (_ref2 = dom.attr('class')) != null ? _ref2.split(/[ ]+/) : void 0) != null ? _ref1 : [];
          for (_i = 0, _len = existing.length; _i < _len; _i++) {
            y = existing[_i];
            if (y.indexOf(prefix) === 0) {
              dom.removeClass(y);
            }
          }
          return dom.addClass("" + prefix + (safe(x)));
        });
      };
    },
    classed: function(name, data) {
      return function(dom, point) {
        return terminate(data).point(point).reactNow(function(x) {
          return dom.toggleClass(name, x === true);
        });
      };
    },
    css: function(prop, data) {
      return function(dom, point) {
        return terminate(data).point(point).reactNow(function(x) {
          return dom.css(prop, safe(x));
        });
      };
    },
    text: function(data) {
      return function(dom, point) {
        return terminate(data).point(point).reactNow(function(x) {
          return dom.text(safe(x));
        });
      };
    },
    html: function(data) {
      return function(dom, point) {
        return terminate(data).point(point).reactNow(function(x) {
          return dom.html(safe(x));
        });
      };
    },
    render: function(data, args) {
      var result;

      if (args == null) {
        args = {};
      }
      result = function(dom, point) {
        var _getView;

        _getView = function(subject, context, app, find, options) {
          return app.getView(subject, extendNew(find != null ? find : {}, {
            context: context,
            constructorOpts: options
          }));
        };
        return Varying.flatMapAll(_getView, terminate(data).point(point), doPoint(args.context, point), point('app'), doPoint(args.find, point), doPoint(args.options, point)).reactNow(function(view) {
          var _ref1;

          if ((_ref1 = dom.data('subview')) != null) {
            _ref1.destroy();
          }
          dom.empty();
          if (view == null) {
            return;
          }
          dom.append(view.artifact());
          return dom.data('subview', view);
        });
      };
      result.context = function(context) {
        return mutators.render(data, extendNew(args, {
          context: context
        }));
      };
      result.find = function(find) {
        return mutators.render(data, extendNew(args, {
          find: find
        }));
      };
      result.options = function(options) {
        return mutators.render(data, extendNew(args, {
          options: options
        }));
      };
      return result;
    }
  };

  module.exports = mutators;

}).call(this);
