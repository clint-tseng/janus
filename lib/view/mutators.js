// Generated by CoffeeScript 1.12.2
(function() {
  var Varying, doPoint, extendNew, from, isFunction, mutators, ref, safe, terminate;

  Varying = require('../core/varying').Varying;

  from = require('../core/from');

  ref = require('../util/util'), isFunction = ref.isFunction, extendNew = ref.extendNew;

  safe = function(x) {
    if (isFunction(x != null ? x.toString : void 0)) {
      return x.toString();
    } else {
      return '';
    }
  };

  terminate = function(x) {
    if (x.point != null) {
      return x;
    } else {
      return x.all;
    }
  };

  doPoint = function(x, point) {
    if ((x != null ? x.point : void 0) != null) {
      return x.point(point);
    } else if ((x != null ? x.all : void 0) != null) {
      return x.all.point(point);
    } else {
      return Varying.ly(x);
    }
  };

  mutators = {
    attr: function(prop, data) {
      return function(dom, point) {
        return terminate(data).point(point).react(function(x) {
          return dom.attr(prop, safe(x));
        });
      };
    },
    classGroup: function(prefix, data) {
      return function(dom, point) {
        return terminate(data).point(point).react(function(x) {
          var existing, i, len, ref1, ref2, y;
          existing = (ref1 = (ref2 = dom.attr('class')) != null ? ref2.split(/[ ]+/) : void 0) != null ? ref1 : [];
          for (i = 0, len = existing.length; i < len; i++) {
            y = existing[i];
            if (y.indexOf(prefix) === 0) {
              dom.removeClass(y);
            }
          }
          return dom.addClass("" + prefix + (safe(x)));
        });
      };
    },
    classed: function(name, data) {
      return function(dom, point) {
        return terminate(data).point(point).react(function(x) {
          return dom.toggleClass(name, x === true);
        });
      };
    },
    css: function(prop, data) {
      return function(dom, point) {
        return terminate(data).point(point).react(function(x) {
          return dom.css(prop, safe(x));
        });
      };
    },
    text: function(data) {
      return function(dom, point) {
        return terminate(data).point(point).react(function(x) {
          return dom.text(safe(x));
        });
      };
    },
    html: function(data) {
      return function(dom, point) {
        return terminate(data).point(point).react(function(x) {
          return dom.html(safe(x));
        });
      };
    },
    render: function(data, args) {
      var result;
      if (args == null) {
        args = {};
      }
      result = function(dom, point) {
        var _vendView;
        _vendView = function(subject, context, app, criteria, options) {
          return app.vendView(subject, extendNew(criteria != null ? criteria : {}, {
            context: context,
            options: options
          }));
        };
        return Varying.flatMapAll(_vendView, terminate(data).point(point), doPoint(args.context, point), doPoint(from.app(), point), doPoint(args.criteria, point), doPoint(args.options, point)).react(function(view) {
          var ref1;
          if ((ref1 = dom.data('subview')) != null) {
            ref1.destroy();
          }
          dom.empty();
          if (view == null) {
            return;
          }
          dom.append(view.artifact());
          if (typeof view.emit === "function") {
            view.emit('appended');
          }
          return dom.data('subview', view);
        });
      };
      result.context = function(context) {
        return mutators.render(data, extendNew(args, {
          context: context
        }));
      };
      result.criteria = function(criteria) {
        return mutators.render(data, extendNew(args, {
          criteria: criteria
        }));
      };
      result.options = function(options) {
        return mutators.render(data, extendNew(args, {
          options: options
        }));
      };
      return result;
    }
  };

  module.exports = mutators;

}).call(this);
