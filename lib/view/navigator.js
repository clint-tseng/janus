// Generated by CoffeeScript 1.12.2
(function() {
  var List, NavigateOne, Navigator, NavigatorRoot, closest, identity, into, match, parentQ,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  List = require('../collection/list').List;

  identity = require('../util/util').identity;

  match = function(selector, view) {
    if (void 0 === selector) {
      return true;
    } else if (view === selector) {
      return true;
    } else if (selector[Symbol.hasInstance] != null) {
      if (view instanceof selector) {
        return true;
      } else if ((view != null ? view.subject : void 0) instanceof selector) {
        return true;
      }
    }
  };

  into = function(selector) {
    return function(selection, primitive) {
      var binding, i, j, len, len1, ref, results, selected, view;
      if (primitive === true) {
        results = [];
        for (i = 0, len = selection.length; i < len; i++) {
          selected = selection[i];
          ref = selected._bindings;
          for (j = 0, len1 = ref.length; j < len1; j++) {
            binding = ref[j];
            if (!(binding.view != null)) {
              continue;
            }
            view = binding.view.get();
            if ((view != null) && match(selector, view) === true) {
              results.push(view);
            }
          }
        }
        return results;
      } else {
        return selection.map(function(selected) {
          var bindings;
          bindings = new List((function() {
            var k, len2, ref1, results1;
            ref1 = selected._bindings;
            results1 = [];
            for (k = 0, len2 = ref1.length; k < len2; k++) {
              binding = ref1[k];
              if (binding.view != null) {
                results1.push(binding.view);
              }
            }
            return results1;
          })());
          return bindings.flatMap(identity).filter(function(view) {
            return (view != null) && match(selector, view);
          });
        }).flatten();
      }
    };
  };

  parentQ = function(selector) {
    return function(selection, primitive) {
      var i, len, parent, results, selected;
      if (primitive === true) {
        results = [];
        for (i = 0, len = selection.length; i < len; i++) {
          selected = selection[i];
          parent = selected.options.parent;
          if ((parent != null) && match(selector, parent) === true && (results.indexOf(parent) === -1)) {
            results.push(parent);
          }
        }
        return results;
      } else {
        return selection.map(function(selected) {
          return selected.options.parent;
        }).filter(function(parent) {
          return (parent != null) && match(selector, parent);
        }).uniq();
      }
    };
  };

  closest = function(selector) {
    return function(selection, primitive) {
      var i, len, parent, results, selected;
      if (primitive === true) {
        results = [];
        for (i = 0, len = selection.length; i < len; i++) {
          selected = selection[i];
          parent = selected.options.parent;
          while (parent != null) {
            if (match(selector, parent) === true) {
              if (results.indexOf(parent) === -1) {
                results.push(parent);
              }
              parent = null;
            } else {
              parent = parent.options.parent;
            }
          }
        }
        return results;
      } else {
        return selection.map(function(view) {
          parent = view.options.parent;
          while (parent != null) {
            if (match(selector, parent) === true) {
              return parent;
            }
            parent = parent.options.parent;
          }
        }).filter(function(x) {
          return x != null;
        }).uniq();
      }
    };
  };

  Navigator = (function() {
    function Navigator(precedent, op) {
      this.precedent = precedent;
      this.op = op;
    }

    Navigator.prototype.parent = function(selector) {
      return new Navigator(this, parentQ(selector));
    };

    Navigator.prototype.into = function(selector) {
      return new Navigator(this, into(selector));
    };

    Navigator.prototype.closest = function(selector) {
      return new Navigator(this, closest(selector));
    };

    Navigator.prototype.first = function() {
      return new NavigateOne(this, 0);
    };

    Navigator.prototype.last = function() {
      return new NavigateOne(this, -1);
    };

    Navigator.prototype.get_ = function() {
      return this.op(this.precedent._get(true), true);
    };

    Navigator.prototype.get = function() {
      return this.op(this.precedent._get(false), false);
    };

    Navigator.prototype._get = function(primitive) {
      return this.op(this.precedent._get(primitive), primitive);
    };

    return Navigator;

  })();

  NavigateOne = (function(superClass) {
    extend(NavigateOne, superClass);

    function NavigateOne(precedent, idx1) {
      this.precedent = precedent;
      this.idx = idx1;
    }

    NavigateOne.prototype.get_ = function() {
      var idx, selection;
      selection = this.precedent._get(true);
      idx = this.idx < 0 ? selection.length + this.idx : this.idx;
      return selection[idx];
    };

    NavigateOne.prototype.get = function() {
      return this.precedent._get(false).at(this.idx);
    };

    NavigateOne.prototype._get = function(primitive) {
      if (primitive === true) {
        return [this.get_()];
      } else {
        return (new List([null])).flatMap((function(_this) {
          return function() {
            return _this.get();
          };
        })(this));
      }
    };

    return NavigateOne;

  })(Navigator);

  NavigatorRoot = (function(superClass) {
    extend(NavigatorRoot, superClass);

    function NavigatorRoot(selection1) {
      this.selection = selection1;
    }

    NavigatorRoot.prototype.get_ = function() {
      return [this.selection];
    };

    NavigatorRoot.prototype.get = function() {
      return new List(this.selection);
    };

    NavigatorRoot.prototype._get = function(primitive) {
      if (primitive === true) {
        return this.get_();
      } else {
        return this.get();
      }
    };

    return NavigatorRoot;

  })(Navigator);

  module.exports = {
    Navigator: Navigator,
    NavigatorRoot: NavigatorRoot,
    match: match
  };

}).call(this);
