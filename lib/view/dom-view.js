// Generated by CoffeeScript 1.12.2
(function() {
  var DomView, List, Varying, View, app, attribute, dynamic, isFunction, isString, match, ref, ref1, resolve, self, varying, watch,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Varying = require('../core/varying').Varying;

  match = require('../core/case').match;

  ref = require('../core/from')["default"], dynamic = ref.dynamic, watch = ref.watch, resolve = ref.resolve, attribute = ref.attribute, varying = ref.varying, app = ref.app, self = ref.self;

  View = require('./view').View;

  List = require('../collection/list').List;

  ref1 = require('../util/util'), isFunction = ref1.isFunction, isString = ref1.isString;

  DomView = (function(superClass) {
    extend(DomView, superClass);

    DomView._dom = function() {
      throw new Error('no dom fragment provided!');
    };

    DomView._template = function() {
      throw new Error('no template provided!');
    };

    function DomView(subject, options) {
      this.subject = subject;
      this.options = options != null ? options : {};
      DomView.__super__.constructor.call(this, this.subject, this.options);
      this._subviews = new List();
      this.on('appended', (function(_this) {
        return function() {
          var i, len, ref2, subview;
          if (_this.artifact().closest('body').length > 0) {
            _this.emit('appendedToDocument');
            ref2 = _this._subviews.list;
            for (i = 0, len = ref2.length; i < len; i++) {
              subview = ref2[i];
              subview.emit('appended');
            }
          }
          return null;
        };
      })(this));
      this.destroyWith(this.subject);
    }

    DomView.prototype.markup = function() {
      var node;
      return ((function() {
        var i, len, ref2, results;
        ref2 = this.artifact().get();
        results = [];
        for (i = 0, len = ref2.length; i < len; i++) {
          node = ref2[i];
          results.push(node.outerHTML);
        }
        return results;
      }).call(this)).join('');
    };

    DomView.prototype._render = function() {
      var dom, found, wrapper;
      dom = this.constructor._dom();
      dom.prepend('<div/>');
      wrapper = dom.children(':first-child');
      wrapper.remove();
      wrapper.append(dom);
      found = this.constructor._template(wrapper);
      this._bindings = found((function(_this) {
        return function(x) {
          return _this.constructor._point(x, _this);
        };
      })(this));
      return dom;
    };

    DomView._point = match(dynamic(function(x, view) {
      if (isFunction(x)) {
        return Varying.ly(x(view.subject));
      } else if (isString(x)) {
        return view.subject.resolve(x, view._app());
      } else {
        return Varying.ly(x);
      }
    }), watch(function(x, view) {
      return view.subject.watch(x);
    }), resolve(function(x, view) {
      return view.subject.resolve(x, view._app());
    }), attribute(function(x, view) {
      return new Varying(view.subject.attribute(x));
    }), varying(function(x, view) {
      if (isFunction(x)) {
        return Varying.ly(x(view.subject));
      } else {
        return Varying.ly(x);
      }
    }), app(function(x, view) {
      return new Varying(view._app());
    }), self(function(x, view) {
      if (isFunction(x)) {
        return Varying.ly(x(view));
      } else {
        return Varying.ly(view);
      }
    }));

    DomView.prototype._attach = function(dom) {
      return null;
    };

    DomView.prototype._app = function() {
      return this._app$ != null ? this._app$ : this._app$ = (function(_this) {
        return function() {
          var library;
          if (_this.options.app == null) {
            return null;
          }
          library = _this.options.app.get('views').newEventBindings();
          library.destroyWith(_this);
          _this.listenTo(library, 'got', function(view) {
            if (_this._wired === true) {
              view.wireEvents();
            }
            return _this._subviews.add(view);
          });
          return _this.options.app.withViewLibrary(library);
        };
      })(this)();
    };

    DomView.prototype.wireEvents = function() {
      var dom, i, len, ref2, view;
      if (this._wired === true) {
        return;
      }
      this._wired = true;
      dom = this.artifact();
      dom.data('view', this);
      this._wireEvents();
      ref2 = this._subviews.list;
      for (i = 0, len = ref2.length; i < len; i++) {
        view = ref2[i];
        if (view != null) {
          view.wireEvents();
        }
      }
      return null;
    };

    DomView.prototype.destroy = function() {
      var base, binding, i, len, ref2;
      if (this._artifact != null) {
        if (typeof (base = this.artifact()).trigger === "function") {
          base.trigger('destroying');
        }
        this.artifact().remove();
        ref2 = this._bindings;
        for (i = 0, len = ref2.length; i < len; i++) {
          binding = ref2[i];
          binding.stop();
        }
      }
      return DomView.__super__.destroy.call(this);
    };

    return DomView;

  })(View);

  module.exports = {
    DomView: DomView
  };

}).call(this);
