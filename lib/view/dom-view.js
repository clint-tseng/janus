// Generated by CoffeeScript 1.12.2
(function() {
  var DomView, List, View,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  View = require('./view').View;

  List = require('../collection/list').List;

  DomView = (function(superClass) {
    extend(DomView, superClass);

    DomView._dom = function() {
      throw new Error('no dom fragment provided!');
    };

    DomView._template = function() {
      throw new Error('no template provided!');
    };

    function DomView(subject, options) {
      var ref;
      this.subject = subject;
      this.options = options != null ? options : {};
      DomView.__super__.constructor.call(this, this.subject, this.options);
      this._subviews = new List();
      this.on('appended', (function(_this) {
        return function() {
          var i, len, ref, subview;
          if (_this.artifact().closest('body').length > 0) {
            _this.emit('appendedToDocument');
            ref = _this._subviews.list;
            for (i = 0, len = ref.length; i < len; i++) {
              subview = ref[i];
              subview.emit('appended');
            }
          }
          return null;
        };
      })(this));
      if ((ref = this.options.app) != null) {
        ref.on('vended', (function(_this) {
          return function(type, subview) {
            if (type !== 'views') {
              return;
            }
            if (_this._wired === true) {
              subview.wireEvents();
            }
            return _this._subviews.add(subview);
          };
        })(this));
      }
      this.destroyWith(this.subject);
    }

    DomView.prototype.markup = function() {
      var node;
      return ((function() {
        var i, len, ref, results;
        ref = this.artifact().get();
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          node = ref[i];
          results.push(node.outerHTML);
        }
        return results;
      }).call(this)).join('');
    };

    DomView.prototype._render = function() {
      var dom, found, generated, parent, wrapper;
      dom = this.constructor._dom();
      wrapper = (dom.parent != null) && (parent = dom.parent()).length > 0 ? parent : (dom.prepend('<div/>'), generated = dom.children(':first-child'), generated.remove(), generated.append(dom), generated);
      found = this.constructor._template(wrapper);
      this._bindings = found((function(_this) {
        return function(x) {
          return _this.constructor.point(x, _this);
        };
      })(this));
      return dom;
    };

    DomView.prototype._attach = function(dom) {
      return null;
    };

    DomView.prototype.wireEvents = function() {
      var dom, i, len, ref, view;
      if (this._wired === true) {
        return;
      }
      this._wired = true;
      dom = this.artifact();
      dom.data('view', this);
      this._wireEvents();
      ref = this._subviews.list;
      for (i = 0, len = ref.length; i < len; i++) {
        view = ref[i];
        if (view != null) {
          view.wireEvents();
        }
      }
      return null;
    };

    DomView.prototype._destroy = function() {
      var base, binding, i, j, len, len1, ref, ref1, results, subview;
      if (this._artifact != null) {
        if (typeof (base = this.artifact()).trigger === "function") {
          base.trigger('destroying');
        }
        this.artifact().remove();
        ref = this._bindings;
        for (i = 0, len = ref.length; i < len; i++) {
          binding = ref[i];
          binding.stop();
        }
        ref1 = this._subviews.list;
        results = [];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          subview = ref1[j];
          results.push(subview.destroy);
        }
        return results;
      }
    };

    return DomView;

  })(View);

  module.exports = {
    DomView: DomView
  };

}).call(this);
