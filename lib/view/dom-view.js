// Generated by CoffeeScript 1.6.2
(function() {
  var DomView, List, Varying, View, app, attribute, dynamic, extend, extendNew, isFunction, isString, match, resolve, varying, watch, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Varying = require('../core/varying').Varying;

  match = require('../core/case').match;

  _ref = require('../core/from')["default"], dynamic = _ref.dynamic, watch = _ref.watch, resolve = _ref.resolve, attribute = _ref.attribute, varying = _ref.varying, app = _ref.app;

  View = require('./view').View;

  List = require('../collection/list').List;

  _ref1 = require('../util/util'), extendNew = _ref1.extendNew, extend = _ref1.extend, isFunction = _ref1.isFunction, isString = _ref1.isString;

  DomView = (function(_super) {
    __extends(DomView, _super);

    DomView._dom = function() {
      throw new Error('no dom fragment provided!');
    };

    DomView._template = function() {
      throw new Error('no template provided!');
    };

    function DomView(subject, options) {
      var _this = this;

      this.subject = subject;
      this.options = options != null ? options : {};
      DomView.__super__.constructor.call(this, this.subject, this.options);
      this._subviews = new List();
      this.on('appended', function() {
        var subview, _i, _len, _ref2;

        if (_this.artifact().closest('body').length > 0) {
          _this.emit('appendedToDocument');
          _ref2 = _this._subviews.list;
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            subview = _ref2[_i];
            subview.emit('appended');
          }
        }
        return null;
      });
      this.destroyWith(this.subject);
    }

    DomView.prototype.markup = function() {
      var node;

      return ((function() {
        var _i, _len, _ref2, _results;

        _ref2 = this.artifact().get();
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          node = _ref2[_i];
          _results.push(node.outerHTML);
        }
        return _results;
      }).call(this)).join('');
    };

    DomView.prototype._render = function() {
      var dom, found, wrapper,
        _this = this;

      dom = this.constructor._dom();
      dom.prepend('<div/>');
      wrapper = dom.filter(':first');
      wrapper.remove();
      wrapper.append(dom);
      found = this.constructor._template(wrapper);
      this._bindings = found(function(x) {
        return _this.constructor._point(x, _this);
      });
      return dom;
    };

    DomView._point = match(dynamic(function(x, view) {
      if (isFunction(x)) {
        return Varying.ly(x(view.subject));
      } else if (isString(x)) {
        return view.subject.resolve(x, view._app());
      } else {
        return Varying.ly(x);
      }
    }), watch(function(x, view) {
      return view.subject.watch(x);
    }), resolve(function(x, view) {
      return view.subject.resolve(x, view._app());
    }), attribute(function(x, view) {
      return new Varying(view.subject.attribute(x));
    }), varying(function(x, view) {
      if (isFunction(x)) {
        return Varying.ly(x(view.subject));
      } else {
        return Varying.ly(x);
      }
    }), app(function(x, view) {
      return new Varying(view._app());
    }));

    DomView.prototype._attach = function(dom) {
      return null;
    };

    DomView.prototype._app = function() {
      var _ref2,
        _this = this;

      return (_ref2 = this._app$) != null ? _ref2 : this._app$ = (function() {
        var library;

        if (_this.options.app == null) {
          return null;
        }
        library = _this.options.app.get('views').newEventBindings();
        library.destroyWith(_this);
        _this.listenTo(library, 'got', function(view) {
          if (_this._wired === true) {
            view.wireEvents();
          }
          return _this._subviews.add(view);
        });
        return _this.options.app.withViewLibrary(library);
      })();
    };

    DomView.prototype.wireEvents = function() {
      var dom, view, _i, _len, _ref2;

      if (this._wired === true) {
        return;
      }
      this._wired = true;
      dom = this.artifact();
      dom.data('view', this);
      this._wireEvents();
      _ref2 = this._subviews.list;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        view = _ref2[_i];
        if (view != null) {
          view.wireEvents();
        }
      }
      return null;
    };

    DomView.prototype.destroy = function() {
      var binding, _base, _i, _len, _ref2;

      if (this._artifact != null) {
        if (typeof (_base = this.artifact()).trigger === "function") {
          _base.trigger('destroying');
        }
        this.artifact().remove();
        _ref2 = this._bindings;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          binding = _ref2[_i];
          binding.stop();
        }
      }
      return DomView.__super__.destroy.call(this);
    };

    return DomView;

  })(View);

  extend(module.exports, {
    DomView: DomView
  });

}).call(this);
