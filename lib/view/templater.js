// Generated by CoffeeScript 1.6.2
(function() {
  var BoundTemplate, Template, build, defaultMutators, find, template, _recurse,
    __slice = [].slice;

  defaultMutators = require('./mutators');

  _recurse = function(m, selector) {
    var k, result, v, _fn;

    result = function(dom) {
      var target;

      target = dom.find(selector);
      return function(point) {
        return m(target, point);
      };
    };
    _fn = function(v) {
      return result[k] = function() {
        var args;

        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return _recurse(v.apply(null, args), selector);
      };
    };
    for (k in m) {
      v = m[k];
      _fn(v);
    }
    return result;
  };

  build = function(mutators) {
    return function(selector) {
      return _recurse(mutators, selector);
    };
  };

  find = build(defaultMutators);

  find.build = build;

  Template = (function() {
    Template.prototype.isTemplate = true;

    function Template(mutations) {
      this.mutations = mutations;
    }

    Template.prototype.bind = function(dom, point) {
      return new BoundTemplate(dom, this.mutations, point);
    };

    return Template;

  })();

  template = function() {
    var mutation, mutations, result, _i, _len;

    mutations = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    result = [];
    for (_i = 0, _len = mutations.length; _i < _len; _i++) {
      mutation = mutations[_i];
      if (mutation.isMutation === true) {
        result.push(mutation);
      } else {
        result = result.concat(template(mutation));
      }
    }
    return new Template(result);
  };

  BoundTemplate = (function() {
    function BoundTemplate(dom, mutations, point) {
      var wrapper;

      this.dom = dom;
      this.mutations = mutations;
      dom.prepend('<div/>');
      this.wrappedDom = wrapper = dom.children(':first');
      wrapper.remove();
      wrapper.append(dom);
      this.point(point);
      this._bind(point);
    }

    BoundTemplate.prototype._bind = function(point) {
      var mutation, _i, _len, _ref;

      _ref = this.mutations;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        mutation = _ref[_i];
        mutation.mutator.bind(this.wrappedDom.find(mutation.selector));
      }
      return null;
    };

    BoundTemplate.prototype.point = function(point) {
      var mutation, _i, _len, _ref;

      _ref = this.mutations;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        mutation = _ref[_i];
        mutation.mutator.point(point);
      }
      return null;
    };

    BoundTemplate.prototype.destroy = function() {
      var mutation, _i, _len, _ref;

      _ref = this.mutations;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        mutation = _ref[_i];
        mutation.mutator.stop();
      }
      dom.trigger('destroying');
      return null;
    };

    return BoundTemplate;

  })();

  module.exports = {
    template: template,
    find: find
  };

}).call(this);
