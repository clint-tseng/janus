// Generated by CoffeeScript 1.6.2
(function() {
  var build, defaultMutators, find, template, _recurse,
    __slice = [].slice;

  defaultMutators = require('./mutators');

  _recurse = function(m, selector) {
    var k, result, v, _fn;

    result = function(dom) {
      var target;

      target = dom.find(selector);
      return function(point) {
        return m(target, point);
      };
    };
    _fn = function(v) {
      return result[k] = function() {
        var args;

        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return _recurse(v.apply(null, args), selector);
      };
    };
    for (k in m) {
      v = m[k];
      _fn(v);
    }
    return result;
  };

  build = function(mutators) {
    return function(selector) {
      return _recurse(mutators, selector);
    };
  };

  find = build(defaultMutators);

  find.build = build;

  template = function() {
    var xs;

    xs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return function(dom) {
      var found, x;

      found = (function() {
        var _i, _len, _results;

        _results = [];
        for (_i = 0, _len = xs.length; _i < _len; _i++) {
          x = xs[_i];
          _results.push(x(dom));
        }
        return _results;
      })();
      return function(point) {
        var f;

        return Array.prototype.concat.apply([], (function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = found.length; _i < _len; _i++) {
            f = found[_i];
            _results.push(f(point));
          }
          return _results;
        })());
      };
    };
  };

  module.exports = {
    find: find,
    template: template
  };

}).call(this);
