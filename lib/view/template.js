// Generated by CoffeeScript 1.12.2
(function() {
  var _recurse, build, defaultMutators, find, template,
    slice = [].slice;

  defaultMutators = require('./mutators');

  _recurse = function(m, selector) {
    var fn, k, result, v;
    result = function(dom) {
      var target;
      target = dom.find(selector);
      return function(point) {
        return m(target, point);
      };
    };
    fn = function(v) {
      return result[k] = function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        return _recurse(v.apply(null, args), selector);
      };
    };
    for (k in m) {
      v = m[k];
      fn(v);
    }
    return result;
  };

  build = function(mutators) {
    return function(selector) {
      return _recurse(mutators, selector);
    };
  };

  find = build(defaultMutators);

  find.build = build;

  template = function() {
    var xs;
    xs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return function(dom) {
      var found, x;
      found = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = xs.length; i < len; i++) {
          x = xs[i];
          results.push(x(dom));
        }
        return results;
      })();
      return function(point) {
        var f;
        return Array.prototype.concat.apply([], (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = found.length; i < len; i++) {
            f = found[i];
            results.push(f(point));
          }
          return results;
        })());
      };
    };
  };

  module.exports = {
    find: find,
    template: template
  };

}).call(this);
